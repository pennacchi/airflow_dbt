{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.11.0b3", "generated_at": "2025-10-23T18:52:56.222893Z", "invocation_id": "7b250d5c-e527-41ec-9347-556e4702fd32", "invocation_started_at": "2025-10-23T18:52:53.621611Z", "env": {}, "project_name": "dbt_project", "project_id": "da47dfd9d223591db0b547e52a86ea4f", "user_id": "297c5f87-7ec1-4aa1-bf5d-3742da979e98", "send_anonymous_usage_stats": true, "adapter_type": "bigquery", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}, "run_started_at": "2025-10-23T18:52:53.621836+00:00"}, "nodes": {"model.dbt_project.dim_shippers": {"database": "penna-airflow-dbt", "schema": "prod_marts", "name": "dim_shippers", "resource_type": "model", "package_name": "dbt_project", "path": "datamart/dim_shippers.sql", "original_file_path": "models/datamart/dim_shippers.sql", "unique_id": "model.dbt_project.dim_shippers", "fqn": ["dbt_project", "datamart", "dim_shippers"], "alias": "dim_shippers", "checksum": {"name": "sha256", "checksum": "d3c845088ccbd46ed07c6583a5d38a14a2f3d3feb8933fff10811dfa91a61403"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#e6b530"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Shipper dimension for analytics, sourced from int_dim_shippers.", "columns": {"shipper_id": {"name": "shipper_id", "description": "Primary key of the shipper.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipper": {"name": "shipper", "description": "Name of the shipping company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipper_phone": {"name": "shipper_phone", "description": "Phone number of the shipping company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipper_source": {"name": "shipper_source", "description": "Source system for the record: 'northwind'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#e6b530"}, "patch_path": "dbt_project://models/datamart/dim_shippers.yml", "build_path": "target/run/dbt_project/models/datamart/dim_shippers.sql", "unrendered_config": {"schema": "marts", "materialized": "table", "docs": {"node_color": "#e6b530"}}, "created_at": 1761245578.055211, "relation_name": "`penna-airflow-dbt`.`prod_marts`.`dim_shippers`", "raw_code": "with dim_shipper as (\n  select * from {{ ref('int_dim_shippers') }}\n)\nselect * from dim_shipper", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_dim_shippers", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.int_dim_shippers"]}, "compiled_path": "target/compiled/dbt_project/models/datamart/dim_shippers.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_dim_shippers as (\n/*\n--------------------------------------------------------------------------------------------------\nOnly for Northwind\n--------------------------------------------------------------------------------------------------\n*/\nwith dim_shipper as (\n  select \n      shipper_id\n    , company_name as shipper\n    , phone        as shipper_phone\n    , 'northwind'  as shipper_source\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__shippers`\n)\nselect * from dim_shipper\n), dim_shipper as (\n  select * from __dbt__cte__int_dim_shippers\n)\nselect * from dim_shipper", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_project.int_dim_shippers", "sql": " __dbt__cte__int_dim_shippers as (\n/*\n--------------------------------------------------------------------------------------------------\nOnly for Northwind\n--------------------------------------------------------------------------------------------------\n*/\nwith dim_shipper as (\n  select \n      shipper_id\n    , company_name as shipper\n    , phone        as shipper_phone\n    , 'northwind'  as shipper_source\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__shippers`\n)\nselect * from dim_shipper\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.dim_customers": {"database": "penna-airflow-dbt", "schema": "prod_marts", "name": "dim_customers", "resource_type": "model", "package_name": "dbt_project", "path": "datamart/dim_customers.sql", "original_file_path": "models/datamart/dim_customers.sql", "unique_id": "model.dbt_project.dim_customers", "fqn": ["dbt_project", "datamart", "dim_customers"], "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "24f0763b01f790bd080311113e9bc9cc3325b81f4ce9af0e9b23db7995907b65"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#e6b530"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Customer dimension for analytics, sourced from int_dim_customers.", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer": {"name": "customer", "description": "Customer's company name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_contact_name": {"name": "customer_contact_name", "description": "Main contact person for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_contact_title": {"name": "customer_contact_title", "description": "Title of the contact person (e.g., Sales Representative, Owner).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_address": {"name": "customer_address", "description": "Customer's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_city": {"name": "customer_city", "description": "Customer's city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_region": {"name": "customer_region", "description": "Customer's region or state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_postal_code": {"name": "customer_postal_code", "description": "Customer's postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_country": {"name": "customer_country", "description": "Customer's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_phone": {"name": "customer_phone", "description": "Customer's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_fax": {"name": "customer_fax", "description": "Customer's fax number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source": {"name": "source", "description": "Source system for the record: 'northwind' or 'erp_new_system'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#e6b530"}, "patch_path": "dbt_project://models/datamart/dim_customers.yml", "build_path": "target/run/dbt_project/models/datamart/dim_customers.sql", "unrendered_config": {"schema": "marts", "materialized": "table", "docs": {"node_color": "#e6b530"}}, "created_at": 1761245578.0391345, "relation_name": "`penna-airflow-dbt`.`prod_marts`.`dim_customers`", "raw_code": "with dim_customers as (\n  select * from {{ ref('int_dim_customers') }}\n)\nselect * from dim_customers", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.int_dim_customers"]}, "compiled_path": "target/compiled/dbt_project/models/datamart/dim_customers.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_dim_customers as (\nwith dim_customer_northwind as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , contact_title                    as customer_contact_title\n    , address                          as customer_address\n    , city                             as customer_city\n    , region                           as customer_region\n    , postal_code                      as customer_postal_code\n    , country                          as customer_country\n    , phone                            as customer_phone\n    , fax                              as customer_fax\n    , 'northwind'                      as source\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__customers`\n)\n, dim_customers_erp_new_system as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , ''                               as customer_contact_title\n    , ''                               as customer_address\n    , ''                               as customer_city\n    , ''                               as customer_region\n    , ''                               as customer_postal_code\n    , ''                               as customer_country\n    , ''                               as customer_phone\n    , ''                               as customer_fax\n    , 'erp_new_system'                 as source\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__customers`\n)\n, dim_customers as (\n  select * from dim_customer_northwind\n  union all\n  select * from dim_customers_erp_new_system\n)\nselect * from dim_customers\n), dim_customers as (\n  select * from __dbt__cte__int_dim_customers\n)\nselect * from dim_customers", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_project.int_dim_customers", "sql": " __dbt__cte__int_dim_customers as (\nwith dim_customer_northwind as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , contact_title                    as customer_contact_title\n    , address                          as customer_address\n    , city                             as customer_city\n    , region                           as customer_region\n    , postal_code                      as customer_postal_code\n    , country                          as customer_country\n    , phone                            as customer_phone\n    , fax                              as customer_fax\n    , 'northwind'                      as source\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__customers`\n)\n, dim_customers_erp_new_system as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , ''                               as customer_contact_title\n    , ''                               as customer_address\n    , ''                               as customer_city\n    , ''                               as customer_region\n    , ''                               as customer_postal_code\n    , ''                               as customer_country\n    , ''                               as customer_phone\n    , ''                               as customer_fax\n    , 'erp_new_system'                 as source\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__customers`\n)\n, dim_customers as (\n  select * from dim_customer_northwind\n  union all\n  select * from dim_customers_erp_new_system\n)\nselect * from dim_customers\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.dim_products": {"database": "penna-airflow-dbt", "schema": "prod_marts", "name": "dim_products", "resource_type": "model", "package_name": "dbt_project", "path": "datamart/dim_products.sql", "original_file_path": "models/datamart/dim_products.sql", "unique_id": "model.dbt_project.dim_products", "fqn": ["dbt_project", "datamart", "dim_products"], "alias": "dim_products", "checksum": {"name": "sha256", "checksum": "32eb615e03ebd0c3da416f7b75265a71d68ce176a24807d9ca957bc856fcc65e"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#e6b530"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Product dimension for analytics, sourced from int_dim_products.", "columns": {"product_id": {"name": "product_id", "description": "Primary key of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product": {"name": "product", "description": "Product name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Foreign key to the product category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_category": {"name": "product_category", "description": "Name of the product category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_category_description": {"name": "product_category_description", "description": "Description of the product category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "Foreign key to the supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_supplier": {"name": "product_supplier", "description": "Name of the supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_quantity_per_unit": {"name": "product_quantity_per_unit", "description": "Quantity per unit (e.g., 10 boxes x 20 bags).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_unit_price": {"name": "product_unit_price", "description": "Unit price of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_units_in_stock": {"name": "product_units_in_stock", "description": "Units of product in stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_units_on_order": {"name": "product_units_on_order", "description": "Units of product on order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_reorder_level": {"name": "product_reorder_level", "description": "Reorder level for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_discontinued": {"name": "product_discontinued", "description": "Indicates if the product is discontinued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source": {"name": "product_source", "description": "Source system for the record: 'northwind' or 'erp_new_system'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#e6b530"}, "patch_path": "dbt_project://models/datamart/dim_products.yml", "build_path": "target/run/dbt_project/models/datamart/dim_products.sql", "unrendered_config": {"schema": "marts", "materialized": "table", "docs": {"node_color": "#e6b530"}}, "created_at": 1761245578.0532393, "relation_name": "`penna-airflow-dbt`.`prod_marts`.`dim_products`", "raw_code": "with dim_products as (\n  select * from {{ ref('int_dim_products') }}\n)\nselect * from dim_products", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.int_dim_products"]}, "compiled_path": "target/compiled/dbt_project/models/datamart/dim_products.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_dim_products as (\nwith dim_products_northwind as (\n  select \n      p.product_id           as product_id\n    , p.product_name         as product\n    , p.category_id          as category_id\n    , c.category_name        as product_category\n    , c.description          as product_category_description\n    , p.supplier_id          as supplier_id\n    , s.company_name         as product_supplier\n    , p.quantity_per_unit    as product_quantity_per_unit\n    , p.unit_price           as product_unit_price\n    , p.units_in_stock       as product_units_in_stock\n    , p.units_on_order       as product_units_on_order\n    , p.reorder_level        as product_reorder_level\n    , p.discontinued         as product_discontinued\n    , 'northwind'            as product_source\n   from `penna-airflow-dbt`.`prod_stage`.`northwind__products` as p\n   left join `penna-airflow-dbt`.`prod_stage`.`northwind__categories` as c on p.category_id = c.category_id\n   left join `penna-airflow-dbt`.`prod_stage`.`northwind__suppliers` as s on p.supplier_id = s.supplier_id\n)\n, dim_products_erp_new_system as (\n  select \n      p.product_id          as product_id\n    , p.name                as product\n    , p.category_id         as category_id\n    , c.category_name       as product_category\n    , c.category_name       as product_category_description\n    , p.supplier_id         as supplier_id\n    , s.supplier_name       as product_supplier\n    , ''                    as product_quantity_per_unit\n    , CAST(NULL as FLOAT64) as product_unit_price\n    , CAST(NULL as INT64)   as product_units_in_stock\n    , CAST(NULL as INT64)   as product_units_on_order\n    , CAST(NULL as INT64)   as product_reorder_level\n    , 0                     as product_discontinued\n    , 'erp_new_system'      as product_source\n   from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__products` as p\n   left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__categories` as c on p.category_id = c.category_id\n   left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__suppliers` as s on p.supplier_id = s.supplier_id\n)\n, dim_products as (\n  select * from dim_products_northwind\n  union all\n  select * from dim_products_erp_new_system\n)\nselect * from dim_products\n), dim_products as (\n  select * from __dbt__cte__int_dim_products\n)\nselect * from dim_products", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_project.int_dim_products", "sql": " __dbt__cte__int_dim_products as (\nwith dim_products_northwind as (\n  select \n      p.product_id           as product_id\n    , p.product_name         as product\n    , p.category_id          as category_id\n    , c.category_name        as product_category\n    , c.description          as product_category_description\n    , p.supplier_id          as supplier_id\n    , s.company_name         as product_supplier\n    , p.quantity_per_unit    as product_quantity_per_unit\n    , p.unit_price           as product_unit_price\n    , p.units_in_stock       as product_units_in_stock\n    , p.units_on_order       as product_units_on_order\n    , p.reorder_level        as product_reorder_level\n    , p.discontinued         as product_discontinued\n    , 'northwind'            as product_source\n   from `penna-airflow-dbt`.`prod_stage`.`northwind__products` as p\n   left join `penna-airflow-dbt`.`prod_stage`.`northwind__categories` as c on p.category_id = c.category_id\n   left join `penna-airflow-dbt`.`prod_stage`.`northwind__suppliers` as s on p.supplier_id = s.supplier_id\n)\n, dim_products_erp_new_system as (\n  select \n      p.product_id          as product_id\n    , p.name                as product\n    , p.category_id         as category_id\n    , c.category_name       as product_category\n    , c.category_name       as product_category_description\n    , p.supplier_id         as supplier_id\n    , s.supplier_name       as product_supplier\n    , ''                    as product_quantity_per_unit\n    , CAST(NULL as FLOAT64) as product_unit_price\n    , CAST(NULL as INT64)   as product_units_in_stock\n    , CAST(NULL as INT64)   as product_units_on_order\n    , CAST(NULL as INT64)   as product_reorder_level\n    , 0                     as product_discontinued\n    , 'erp_new_system'      as product_source\n   from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__products` as p\n   left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__categories` as c on p.category_id = c.category_id\n   left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__suppliers` as s on p.supplier_id = s.supplier_id\n)\n, dim_products as (\n  select * from dim_products_northwind\n  union all\n  select * from dim_products_erp_new_system\n)\nselect * from dim_products\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.fact_orders": {"database": "penna-airflow-dbt", "schema": "prod_marts", "name": "fact_orders", "resource_type": "model", "package_name": "dbt_project", "path": "datamart/fact_orders.sql", "original_file_path": "models/datamart/fact_orders.sql", "unique_id": "model.dbt_project.fact_orders", "fqn": ["dbt_project", "datamart", "fact_orders"], "alias": "fact_orders", "checksum": {"name": "sha256", "checksum": "466ac12e9403c4bc74942f61db4bfa4a51137970e8c1beb69721fb61a7b82a1e"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#e6b530"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for orders, sourced from int_fact_orders.", "columns": {"order_id": {"name": "order_id", "description": "Primary key of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to the customer. ", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "salesperson_id": {"name": "salesperson_id", "description": "Foreign key to the salesperson/employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "Date when the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Foreign key to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the product in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantity of the product in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_discount_percentage": {"name": "product_discount_percentage", "description": "Discount percentage applied to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_sales_revenue": {"name": "product_sales_revenue", "description": "Gross sales revenue for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_discount_value": {"name": "product_discount_value", "description": "Discount value for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gross_revenue": {"name": "gross_revenue", "description": "Gross revenue for the order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "net_revenue": {"name": "net_revenue", "description": "Net revenue for the order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "required_date": {"name": "required_date", "description": "Date requested for delivery.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "Date when the order was shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_flag": {"name": "shipped_flag", "description": "Indicates if the order was shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delayed_flag": {"name": "delayed_flag", "description": "Indicates if the order was delivered late.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delayed_days": {"name": "delayed_days", "description": "Number of days the delivery was delayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipping_time": {"name": "shipping_time", "description": "Total shipping time in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_via": {"name": "ship_via", "description": "Shipping company or method used for delivery.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_name": {"name": "ship_name", "description": "Name of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address": {"name": "ship_address", "description": "Street address of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_city": {"name": "ship_city", "description": "City of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_region": {"name": "ship_region", "description": "Region or state of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_postal_code": {"name": "ship_postal_code", "description": "Postal code of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_country": {"name": "ship_country", "description": "Country of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#e6b530"}, "patch_path": "dbt_project://models/datamart/fact_orders.yml", "build_path": "target/run/dbt_project/models/datamart/fact_orders.sql", "unrendered_config": {"schema": "marts", "materialized": "table", "docs": {"node_color": "#e6b530"}}, "created_at": 1761245578.0480502, "relation_name": "`penna-airflow-dbt`.`prod_marts`.`fact_orders`", "raw_code": "with fact_orders as (\n  select * from {{ ref('int_fact_orders') }}\n)\nselect * from fact_orders", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_orders", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.int_fact_orders"]}, "compiled_path": "target/compiled/dbt_project/models/datamart/fact_orders.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_fact_orders as (\n/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n\nwith order_and_details_erp_new_system as (\n    select \n      s.sale_id         as order_id\n    , s.customer_id     as customer_id\n    , s.salesperson_id  as salesperson_id\n    , s.sale_date       as order_date\n    , sd.product_id     as product_id\n    , sd.price_per_unit as unit_price\n    , sd.qty            as quantity\n    , sd.discount_percentage                                       as product_discount_percentage\n    , (sd.price_per_unit * sd.qty)                                 as product_sales_revenue\n    , (sd.price_per_unit * sd.qty) * (sd.discount_percentage)      as product_discount_value\n    , (sd.price_per_unit * sd.qty)                                 as gross_revenue\n    , (sd.price_per_unit * sd.qty) * (1 - sd.discount_percentage)  as net_revenue\n    , s.required_delivery_date                                     as required_date\n    , s.shipped_date                                               as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales` as s\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales_details` as sd on sd.sale_id = s.sale_id\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__address` as a on s.ship_address_id = a.address_id\n  \n)\n, freight_as_order_and_details_erp_new_system as (\n    select \n      s.sale_id                   as order_id\n    , s.customer_id               as customer_id\n    , s.salesperson_id            as salesperson_id\n    , s.sale_date                 as order_date\n    , 'erp_new_system||P021'      as product_id\n    , s.freight_value             as unit_price\n    , 1                           as quantity\n    , 0                           as product_discount_percentage\n    , 0                           as product_sales_revenue\n    , 0                           as product_discount_value\n    , s.freight_value             as gross_revenue\n    , s.freight_value             as net_revenue\n    , s.required_delivery_date    as required_date\n    , s.shipped_date              as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales` as s\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__address` as a on s.ship_address_id = a.address_id\n)\n/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n, order_and_details_northwind as (\n    select \n      o.order_id\n    , o.customer_id\n    , o.employee_id as salesperson_id\n    , o.order_date\n    , od.product_id\n    , od.unit_price\n    , od.quantity\n    , od.discount                                        as product_discount_percentage\n    , (od.unit_price * od.quantity)                      as product_sales_revenue\n    , (od.unit_price * od.quantity) * (od.discount)      as product_discount_value\n    , (od.unit_price * od.quantity)                      as gross_revenue\n    , (od.unit_price * od.quantity) * (1 - od.discount)  as net_revenue\n    , o.required_date\n    , o.shipped_date\n    , o.shipped_flag\n    , o.delayed_flag\n    , o.delayed_days\n    , o.shipping_time\n    , sv.description as ship_via\n    , o.ship_name\n    , o.ship_address\n    , o.ship_city\n    , o.ship_region\n    , o.ship_postal_code\n    , o.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__orders` as o\n  left join `penna-airflow-dbt`.`prod_stage`.`northwind__order_details` as od on o.order_id = od.order_id\n  left join `penna-airflow-dbt`.`prod_stage`.`northwind__ship_via` as sv on o.ship_via_id = sv.ship_via_id\n)\n, freight_as_order_detail_northwind as (\n    select \n        order_id\n      , customer_id\n      , employee_id as salesperson_id\n      , order_date\n      , 'northwind||78' as product_id\n      , freight as unit_price\n      , 1 as quantity\n      , 0 as product_discount_percentage\n      , 0 as product_sales_revenue\n      , 0 as product_discount_value\n      , freight as gross_revenue\n      , freight as net_revenue\n      , required_date\n      , shipped_date\n      , shipped_flag\n      , delayed_flag\n      , delayed_days\n      , shipping_time\n      , sv.description as ship_via\n      , ship_name\n      , ship_address\n      , ship_city\n      , ship_region\n      , ship_postal_code\n      , ship_country\n    from `penna-airflow-dbt`.`prod_stage`.`northwind__orders` as o\n    left join `penna-airflow-dbt`.`prod_stage`.`northwind__ship_via` as sv on o.ship_via_id = sv.ship_via_id\n)\n, fact_orders as (\n  select * from order_and_details_northwind\n  union all\n  select * from freight_as_order_detail_northwind\n  union all\n  select * from order_and_details_erp_new_system\n  union all\n  select * from freight_as_order_and_details_erp_new_system\n)\nselect * from fact_orders\n), fact_orders as (\n  select * from __dbt__cte__int_fact_orders\n)\nselect * from fact_orders", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_project.int_fact_orders", "sql": " __dbt__cte__int_fact_orders as (\n/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n\nwith order_and_details_erp_new_system as (\n    select \n      s.sale_id         as order_id\n    , s.customer_id     as customer_id\n    , s.salesperson_id  as salesperson_id\n    , s.sale_date       as order_date\n    , sd.product_id     as product_id\n    , sd.price_per_unit as unit_price\n    , sd.qty            as quantity\n    , sd.discount_percentage                                       as product_discount_percentage\n    , (sd.price_per_unit * sd.qty)                                 as product_sales_revenue\n    , (sd.price_per_unit * sd.qty) * (sd.discount_percentage)      as product_discount_value\n    , (sd.price_per_unit * sd.qty)                                 as gross_revenue\n    , (sd.price_per_unit * sd.qty) * (1 - sd.discount_percentage)  as net_revenue\n    , s.required_delivery_date                                     as required_date\n    , s.shipped_date                                               as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales` as s\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales_details` as sd on sd.sale_id = s.sale_id\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__address` as a on s.ship_address_id = a.address_id\n  \n)\n, freight_as_order_and_details_erp_new_system as (\n    select \n      s.sale_id                   as order_id\n    , s.customer_id               as customer_id\n    , s.salesperson_id            as salesperson_id\n    , s.sale_date                 as order_date\n    , 'erp_new_system||P021'      as product_id\n    , s.freight_value             as unit_price\n    , 1                           as quantity\n    , 0                           as product_discount_percentage\n    , 0                           as product_sales_revenue\n    , 0                           as product_discount_value\n    , s.freight_value             as gross_revenue\n    , s.freight_value             as net_revenue\n    , s.required_delivery_date    as required_date\n    , s.shipped_date              as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales` as s\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__address` as a on s.ship_address_id = a.address_id\n)\n/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n, order_and_details_northwind as (\n    select \n      o.order_id\n    , o.customer_id\n    , o.employee_id as salesperson_id\n    , o.order_date\n    , od.product_id\n    , od.unit_price\n    , od.quantity\n    , od.discount                                        as product_discount_percentage\n    , (od.unit_price * od.quantity)                      as product_sales_revenue\n    , (od.unit_price * od.quantity) * (od.discount)      as product_discount_value\n    , (od.unit_price * od.quantity)                      as gross_revenue\n    , (od.unit_price * od.quantity) * (1 - od.discount)  as net_revenue\n    , o.required_date\n    , o.shipped_date\n    , o.shipped_flag\n    , o.delayed_flag\n    , o.delayed_days\n    , o.shipping_time\n    , sv.description as ship_via\n    , o.ship_name\n    , o.ship_address\n    , o.ship_city\n    , o.ship_region\n    , o.ship_postal_code\n    , o.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__orders` as o\n  left join `penna-airflow-dbt`.`prod_stage`.`northwind__order_details` as od on o.order_id = od.order_id\n  left join `penna-airflow-dbt`.`prod_stage`.`northwind__ship_via` as sv on o.ship_via_id = sv.ship_via_id\n)\n, freight_as_order_detail_northwind as (\n    select \n        order_id\n      , customer_id\n      , employee_id as salesperson_id\n      , order_date\n      , 'northwind||78' as product_id\n      , freight as unit_price\n      , 1 as quantity\n      , 0 as product_discount_percentage\n      , 0 as product_sales_revenue\n      , 0 as product_discount_value\n      , freight as gross_revenue\n      , freight as net_revenue\n      , required_date\n      , shipped_date\n      , shipped_flag\n      , delayed_flag\n      , delayed_days\n      , shipping_time\n      , sv.description as ship_via\n      , ship_name\n      , ship_address\n      , ship_city\n      , ship_region\n      , ship_postal_code\n      , ship_country\n    from `penna-airflow-dbt`.`prod_stage`.`northwind__orders` as o\n    left join `penna-airflow-dbt`.`prod_stage`.`northwind__ship_via` as sv on o.ship_via_id = sv.ship_via_id\n)\n, fact_orders as (\n  select * from order_and_details_northwind\n  union all\n  select * from freight_as_order_detail_northwind\n  union all\n  select * from order_and_details_erp_new_system\n  union all\n  select * from freight_as_order_and_details_erp_new_system\n)\nselect * from fact_orders\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.dim_employees": {"database": "penna-airflow-dbt", "schema": "prod_marts", "name": "dim_employees", "resource_type": "model", "package_name": "dbt_project", "path": "datamart/dim_employees.sql", "original_file_path": "models/datamart/dim_employees.sql", "unique_id": "model.dbt_project.dim_employees", "fqn": ["dbt_project", "datamart", "dim_employees"], "alias": "dim_employees", "checksum": {"name": "sha256", "checksum": "e01ba0f0cfcb7e3f0913e3fbac3148506ab0ead6d0cc4ef9f6c508e7c8c733e9"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#e6b530"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Employee dimension for analytics, sourced from int_dim_employees.", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee": {"name": "employee", "description": "Employee's full name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_title": {"name": "employee_title", "description": "Job title of the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_birth_date": {"name": "employee_birth_date", "description": "Employee's date of birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_hire_date": {"name": "employee_hire_date", "description": "Date the employee was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_reports_to": {"name": "employee_reports_to", "description": "ID of the employee's immediate supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_hierarchy_level": {"name": "employee_hierarchy_level", "description": "Hierarchy level of the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_1": {"name": "employee_superior_level_1", "description": "Name of the top-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_2": {"name": "employee_superior_level_2", "description": "Name of the second-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_3": {"name": "employee_superior_level_3", "description": "Name of the third-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_4": {"name": "employee_superior_level_4", "description": "Name of the fourth-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hierarchy_path": {"name": "hierarchy_path", "description": "Full hierarchical path from the top to this employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_source": {"name": "employee_source", "description": "Source system for the record: 'northwind' or 'erp_new_system'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#e6b530"}, "patch_path": "dbt_project://models/datamart/dim_employees.yml", "build_path": "target/run/dbt_project/models/datamart/dim_employees.sql", "unrendered_config": {"schema": "marts", "materialized": "table", "docs": {"node_color": "#e6b530"}}, "created_at": 1761245578.034021, "relation_name": "`penna-airflow-dbt`.`prod_marts`.`dim_employees`", "raw_code": "with dim_employees as (\n  select * from {{ ref('int_dim_employees') }}\n)\nselect * from dim_employees", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_dim_employees", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.int_dim_employees"]}, "compiled_path": "target/compiled/dbt_project/models/datamart/dim_employees.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_dim_employees as (\nWith dim_employees_erp_new_system as (\n  select \n      e.employee_id                       as employee_id\n    , e.name                              as employee\n    , e.title                             as employee_title\n    , cast(NULL as TIMESTAMP)             as employee_birth_date\n    , cast(NULL as TIMESTAMP)             as employee_hire_date\n    , e.boss_id                           as employee_reports_to\n    , eh.hierarchy_level                  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'erp_new_system'                    as employee_source\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__employees` e\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__employee_hierarchy` eh \n    on eh.employee_id = e.employee_id\n)\n, dim_employees_northwind as (\n  SELECT\n      eh.employee_id      as employee_id\n    , eh.employee_name    as employee\n    , e.title             as employee_title\n    , e.birth_date        as employee_birth_date\n    , e.hire_date         as employee_hire_date\n    , eh.reports_to       as employee_reports_to\n    , eh.hierarchy_level  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'northwind'          as employee_source\n  FROM `penna-airflow-dbt`.`prod_stage`.`northwind__employees` e\n  LEFT JOIN `penna-airflow-dbt`.`prod_stage`.`northwind__employee_hierarchy` eh\n    ON eh.employee_id = e.employee_id\n) \n, dim_employees as (\n  select * from dim_employees_erp_new_system\n  union all\n  select * from dim_employees_northwind\n)\nselect * from dim_employees\n), dim_employees as (\n  select * from __dbt__cte__int_dim_employees\n)\nselect * from dim_employees", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_project.int_dim_employees", "sql": " __dbt__cte__int_dim_employees as (\nWith dim_employees_erp_new_system as (\n  select \n      e.employee_id                       as employee_id\n    , e.name                              as employee\n    , e.title                             as employee_title\n    , cast(NULL as TIMESTAMP)             as employee_birth_date\n    , cast(NULL as TIMESTAMP)             as employee_hire_date\n    , e.boss_id                           as employee_reports_to\n    , eh.hierarchy_level                  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'erp_new_system'                    as employee_source\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__employees` e\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__employee_hierarchy` eh \n    on eh.employee_id = e.employee_id\n)\n, dim_employees_northwind as (\n  SELECT\n      eh.employee_id      as employee_id\n    , eh.employee_name    as employee\n    , e.title             as employee_title\n    , e.birth_date        as employee_birth_date\n    , e.hire_date         as employee_hire_date\n    , eh.reports_to       as employee_reports_to\n    , eh.hierarchy_level  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'northwind'          as employee_source\n  FROM `penna-airflow-dbt`.`prod_stage`.`northwind__employees` e\n  LEFT JOIN `penna-airflow-dbt`.`prod_stage`.`northwind__employee_hierarchy` eh\n    ON eh.employee_id = e.employee_id\n) \n, dim_employees as (\n  select * from dim_employees_erp_new_system\n  union all\n  select * from dim_employees_northwind\n)\nselect * from dim_employees\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.int_dim_employees": {"database": "penna-airflow-dbt", "schema": "prod_intermediate", "name": "int_dim_employees", "resource_type": "model", "package_name": "dbt_project", "path": "intermediate/int_dim_employees.sql", "original_file_path": "models/intermediate/int_dim_employees.sql", "unique_id": "model.dbt_project.int_dim_employees", "fqn": ["dbt_project", "intermediate", "int_dim_employees"], "alias": "int_dim_employees", "checksum": {"name": "sha256", "checksum": "db03b341a06b121d1502d5bca3ac68bbba41fa8b26f11030215876eb4e887e96"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Consolidated employee dimension from Northwind and ERP New System sources.", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee": {"name": "employee", "description": "Employee's full name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_title": {"name": "employee_title", "description": "Job title of the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_birth_date": {"name": "employee_birth_date", "description": "Employee's date of birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_hire_date": {"name": "employee_hire_date", "description": "Date the employee was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_reports_to": {"name": "employee_reports_to", "description": "ID of the employee's immediate supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_hierarchy_level": {"name": "employee_hierarchy_level", "description": "Hierarchy level of the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_1": {"name": "employee_superior_level_1", "description": "Name of the top-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_2": {"name": "employee_superior_level_2", "description": "Name of the second-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_3": {"name": "employee_superior_level_3", "description": "Name of the third-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_superior_level_4": {"name": "employee_superior_level_4", "description": "Name of the fourth-level superior in the hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hierarchy_path": {"name": "hierarchy_path", "description": "Full hierarchical path from the top to this employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_source": {"name": "employee_source", "description": "Source system for the record: 'northwind' or 'erp_new_system'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "dbt_project://models/intermediate/int_dim_employees.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "ephemeral", "docs": {"node_color": "#c0c0c0"}}, "created_at": 1761245578.0574996, "relation_name": null, "raw_code": "With dim_employees_erp_new_system as (\n  select \n      e.employee_id                       as employee_id\n    , e.name                              as employee\n    , e.title                             as employee_title\n    , cast(NULL as TIMESTAMP)             as employee_birth_date\n    , cast(NULL as TIMESTAMP)             as employee_hire_date\n    , e.boss_id                           as employee_reports_to\n    , eh.hierarchy_level                  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'erp_new_system'                    as employee_source\n  from {{ ref('erp_new_system__employees') }} e\n  left join {{ ref('erp_new_system__employee_hierarchy') }} eh \n    on eh.employee_id = e.employee_id\n)\n, dim_employees_northwind as (\n  SELECT\n      eh.employee_id      as employee_id\n    , eh.employee_name    as employee\n    , e.title             as employee_title\n    , e.birth_date        as employee_birth_date\n    , e.hire_date         as employee_hire_date\n    , eh.reports_to       as employee_reports_to\n    , eh.hierarchy_level  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'northwind'          as employee_source\n  FROM {{ ref('northwind__employees') }} e\n  LEFT JOIN {{ ref('northwind__employee_hierarchy') }} eh\n    ON eh.employee_id = e.employee_id\n) \n, dim_employees as (\n  select * from dim_employees_erp_new_system\n  union all\n  select * from dim_employees_northwind\n)\nselect * from dim_employees", "doc_blocks": [], "language": "sql", "refs": [{"name": "erp_new_system__employees", "package": null, "version": null}, {"name": "erp_new_system__employee_hierarchy", "package": null, "version": null}, {"name": "northwind__employees", "package": null, "version": null}, {"name": "northwind__employee_hierarchy", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.erp_new_system__employees", "model.dbt_project.erp_new_system__employee_hierarchy", "model.dbt_project.northwind__employees", "model.dbt_project.northwind__employee_hierarchy"]}, "compiled_path": "target/compiled/dbt_project/models/intermediate/int_dim_employees.sql", "compiled": true, "compiled_code": "With dim_employees_erp_new_system as (\n  select \n      e.employee_id                       as employee_id\n    , e.name                              as employee\n    , e.title                             as employee_title\n    , cast(NULL as TIMESTAMP)             as employee_birth_date\n    , cast(NULL as TIMESTAMP)             as employee_hire_date\n    , e.boss_id                           as employee_reports_to\n    , eh.hierarchy_level                  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'erp_new_system'                    as employee_source\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__employees` e\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__employee_hierarchy` eh \n    on eh.employee_id = e.employee_id\n)\n, dim_employees_northwind as (\n  SELECT\n      eh.employee_id      as employee_id\n    , eh.employee_name    as employee\n    , e.title             as employee_title\n    , e.birth_date        as employee_birth_date\n    , e.hire_date         as employee_hire_date\n    , eh.reports_to       as employee_reports_to\n    , eh.hierarchy_level  as employee_hierarchy_level\n    , CASE\n      \tWHEN eh.hierarchy_level >= 1 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(0)]\n      \telse ''\n      END AS employee_superior_level_1\n    , CASE\n      \tWHEN eh.hierarchy_level >= 2 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(1)]\n      \telse ''\n      END AS employee_superior_level_2\n    , CASE\n      \tWHEN eh.hierarchy_level >= 3 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(2)]\n      \telse ''\n      END AS employee_superior_level_3\n    , CASE\n      \tWHEN eh.hierarchy_level >= 4 THEN SPLIT(eh.hierarchy_path, ' -> ')[OFFSET(3)]\n      \telse ''\n      END AS employee_superior_level_4\n    , eh.hierarchy_path\n    , 'northwind'          as employee_source\n  FROM `penna-airflow-dbt`.`prod_stage`.`northwind__employees` e\n  LEFT JOIN `penna-airflow-dbt`.`prod_stage`.`northwind__employee_hierarchy` eh\n    ON eh.employee_id = e.employee_id\n) \n, dim_employees as (\n  select * from dim_employees_erp_new_system\n  union all\n  select * from dim_employees_northwind\n)\nselect * from dim_employees", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.int_dim_products": {"database": "penna-airflow-dbt", "schema": "prod_intermediate", "name": "int_dim_products", "resource_type": "model", "package_name": "dbt_project", "path": "intermediate/int_dim_products.sql", "original_file_path": "models/intermediate/int_dim_products.sql", "unique_id": "model.dbt_project.int_dim_products", "fqn": ["dbt_project", "intermediate", "int_dim_products"], "alias": "int_dim_products", "checksum": {"name": "sha256", "checksum": "8624c9a2001d0bb5bcee7b29c1048a2e11e01edc79d2df858ce05afadfe9e8e3"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Consolidated product dimension from Northwind and ERP New System sources.", "columns": {"product_id": {"name": "product_id", "description": "Primary key of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product": {"name": "product", "description": "Product name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Foreign key to the product category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_category": {"name": "product_category", "description": "Name of the product category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_category_description": {"name": "product_category_description", "description": "Description of the product category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "Foreign key to the supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_supplier": {"name": "product_supplier", "description": "Name of the supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_quantity_per_unit": {"name": "product_quantity_per_unit", "description": "Quantity per unit (e.g., 10 boxes x 20 bags).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_unit_price": {"name": "product_unit_price", "description": "Unit price of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_units_in_stock": {"name": "product_units_in_stock", "description": "Units of product in stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_units_on_order": {"name": "product_units_on_order", "description": "Units of product on order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_reorder_level": {"name": "product_reorder_level", "description": "Reorder level for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_discontinued": {"name": "product_discontinued", "description": "Indicates if the product is discontinued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_source": {"name": "product_source", "description": "Source system for the record: 'northwind' or 'erp_new_system'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "dbt_project://models/intermediate/int_dim_products.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "ephemeral", "docs": {"node_color": "#c0c0c0"}}, "created_at": 1761245578.05632, "relation_name": null, "raw_code": "with dim_products_northwind as (\n  select \n      p.product_id           as product_id\n    , p.product_name         as product\n    , p.category_id          as category_id\n    , c.category_name        as product_category\n    , c.description          as product_category_description\n    , p.supplier_id          as supplier_id\n    , s.company_name         as product_supplier\n    , p.quantity_per_unit    as product_quantity_per_unit\n    , p.unit_price           as product_unit_price\n    , p.units_in_stock       as product_units_in_stock\n    , p.units_on_order       as product_units_on_order\n    , p.reorder_level        as product_reorder_level\n    , p.discontinued         as product_discontinued\n    , 'northwind'            as product_source\n   from {{ ref('northwind__products') }} as p\n   left join {{ ref('northwind__categories') }} as c on p.category_id = c.category_id\n   left join {{ ref('northwind__suppliers') }} as s on p.supplier_id = s.supplier_id\n)\n, dim_products_erp_new_system as (\n  select \n      p.product_id          as product_id\n    , p.name                as product\n    , p.category_id         as category_id\n    , c.category_name       as product_category\n    , c.category_name       as product_category_description\n    , p.supplier_id         as supplier_id\n    , s.supplier_name       as product_supplier\n    , ''                    as product_quantity_per_unit\n    , CAST(NULL as FLOAT64) as product_unit_price\n    , CAST(NULL as INT64)   as product_units_in_stock\n    , CAST(NULL as INT64)   as product_units_on_order\n    , CAST(NULL as INT64)   as product_reorder_level\n    , 0                     as product_discontinued\n    , 'erp_new_system'      as product_source\n   from {{ ref('erp_new_system__products') }} as p\n   left join {{ ref('erp_new_system__categories') }} as c on p.category_id = c.category_id\n   left join {{ ref('erp_new_system__suppliers') }} as s on p.supplier_id = s.supplier_id\n)\n, dim_products as (\n  select * from dim_products_northwind\n  union all\n  select * from dim_products_erp_new_system\n)\nselect * from dim_products", "doc_blocks": [], "language": "sql", "refs": [{"name": "northwind__products", "package": null, "version": null}, {"name": "northwind__categories", "package": null, "version": null}, {"name": "northwind__suppliers", "package": null, "version": null}, {"name": "erp_new_system__products", "package": null, "version": null}, {"name": "erp_new_system__categories", "package": null, "version": null}, {"name": "erp_new_system__suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.northwind__products", "model.dbt_project.northwind__categories", "model.dbt_project.northwind__suppliers", "model.dbt_project.erp_new_system__products", "model.dbt_project.erp_new_system__categories", "model.dbt_project.erp_new_system__suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/intermediate/int_dim_products.sql", "compiled": true, "compiled_code": "with dim_products_northwind as (\n  select \n      p.product_id           as product_id\n    , p.product_name         as product\n    , p.category_id          as category_id\n    , c.category_name        as product_category\n    , c.description          as product_category_description\n    , p.supplier_id          as supplier_id\n    , s.company_name         as product_supplier\n    , p.quantity_per_unit    as product_quantity_per_unit\n    , p.unit_price           as product_unit_price\n    , p.units_in_stock       as product_units_in_stock\n    , p.units_on_order       as product_units_on_order\n    , p.reorder_level        as product_reorder_level\n    , p.discontinued         as product_discontinued\n    , 'northwind'            as product_source\n   from `penna-airflow-dbt`.`prod_stage`.`northwind__products` as p\n   left join `penna-airflow-dbt`.`prod_stage`.`northwind__categories` as c on p.category_id = c.category_id\n   left join `penna-airflow-dbt`.`prod_stage`.`northwind__suppliers` as s on p.supplier_id = s.supplier_id\n)\n, dim_products_erp_new_system as (\n  select \n      p.product_id          as product_id\n    , p.name                as product\n    , p.category_id         as category_id\n    , c.category_name       as product_category\n    , c.category_name       as product_category_description\n    , p.supplier_id         as supplier_id\n    , s.supplier_name       as product_supplier\n    , ''                    as product_quantity_per_unit\n    , CAST(NULL as FLOAT64) as product_unit_price\n    , CAST(NULL as INT64)   as product_units_in_stock\n    , CAST(NULL as INT64)   as product_units_on_order\n    , CAST(NULL as INT64)   as product_reorder_level\n    , 0                     as product_discontinued\n    , 'erp_new_system'      as product_source\n   from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__products` as p\n   left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__categories` as c on p.category_id = c.category_id\n   left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__suppliers` as s on p.supplier_id = s.supplier_id\n)\n, dim_products as (\n  select * from dim_products_northwind\n  union all\n  select * from dim_products_erp_new_system\n)\nselect * from dim_products", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.int_dim_customers": {"database": "penna-airflow-dbt", "schema": "prod_intermediate", "name": "int_dim_customers", "resource_type": "model", "package_name": "dbt_project", "path": "intermediate/int_dim_customers.sql", "original_file_path": "models/intermediate/int_dim_customers.sql", "unique_id": "model.dbt_project.int_dim_customers", "fqn": ["dbt_project", "intermediate", "int_dim_customers"], "alias": "int_dim_customers", "checksum": {"name": "sha256", "checksum": "b461325f14f32bfff94727476fd686007978e3dc2e57e6e27d7cf7dca0547d39"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Consolidated customer dimension from Northwind and ERP New System sources.", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer": {"name": "customer", "description": "Customer's company name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_contact_name": {"name": "customer_contact_name", "description": "Main contact person for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_contact_title": {"name": "customer_contact_title", "description": "Title of the contact person (e.g., Sales Representative, Owner).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_address": {"name": "customer_address", "description": "Customer's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_city": {"name": "customer_city", "description": "Customer's city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_region": {"name": "customer_region", "description": "Customer's region or state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_postal_code": {"name": "customer_postal_code", "description": "Customer's postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_country": {"name": "customer_country", "description": "Customer's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_phone": {"name": "customer_phone", "description": "Customer's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_fax": {"name": "customer_fax", "description": "Customer's fax number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source": {"name": "source", "description": "Source system for the record: 'northwind' or 'erp_new_system'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "dbt_project://models/intermediate/int_dim_customers.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "ephemeral", "docs": {"node_color": "#c0c0c0"}}, "created_at": 1761245578.058543, "relation_name": null, "raw_code": "with dim_customer_northwind as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , contact_title                    as customer_contact_title\n    , address                          as customer_address\n    , city                             as customer_city\n    , region                           as customer_region\n    , postal_code                      as customer_postal_code\n    , country                          as customer_country\n    , phone                            as customer_phone\n    , fax                              as customer_fax\n    , 'northwind'                      as source\n  from {{ ref('northwind__customers') }}\n)\n, dim_customers_erp_new_system as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , ''                               as customer_contact_title\n    , ''                               as customer_address\n    , ''                               as customer_city\n    , ''                               as customer_region\n    , ''                               as customer_postal_code\n    , ''                               as customer_country\n    , ''                               as customer_phone\n    , ''                               as customer_fax\n    , 'erp_new_system'                 as source\n  from {{ ref('erp_new_system__customers') }}\n)\n, dim_customers as (\n  select * from dim_customer_northwind\n  union all\n  select * from dim_customers_erp_new_system\n)\nselect * from dim_customers", "doc_blocks": [], "language": "sql", "refs": [{"name": "northwind__customers", "package": null, "version": null}, {"name": "erp_new_system__customers", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.northwind__customers", "model.dbt_project.erp_new_system__customers"]}, "compiled_path": "target/compiled/dbt_project/models/intermediate/int_dim_customers.sql", "compiled": true, "compiled_code": "with dim_customer_northwind as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , contact_title                    as customer_contact_title\n    , address                          as customer_address\n    , city                             as customer_city\n    , region                           as customer_region\n    , postal_code                      as customer_postal_code\n    , country                          as customer_country\n    , phone                            as customer_phone\n    , fax                              as customer_fax\n    , 'northwind'                      as source\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__customers`\n)\n, dim_customers_erp_new_system as (\n  select \n      customer_id                      as customer_id\n    , company_name                     as customer\n    , contact_name                     as customer_contact_name\n    , ''                               as customer_contact_title\n    , ''                               as customer_address\n    , ''                               as customer_city\n    , ''                               as customer_region\n    , ''                               as customer_postal_code\n    , ''                               as customer_country\n    , ''                               as customer_phone\n    , ''                               as customer_fax\n    , 'erp_new_system'                 as source\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__customers`\n)\n, dim_customers as (\n  select * from dim_customer_northwind\n  union all\n  select * from dim_customers_erp_new_system\n)\nselect * from dim_customers", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.int_fact_orders": {"database": "penna-airflow-dbt", "schema": "prod_intermediate", "name": "int_fact_orders", "resource_type": "model", "package_name": "dbt_project", "path": "intermediate/int_fact_orders.sql", "original_file_path": "models/intermediate/int_fact_orders.sql", "unique_id": "model.dbt_project.int_fact_orders", "fqn": ["dbt_project", "intermediate", "int_fact_orders"], "alias": "int_fact_orders", "checksum": {"name": "sha256", "checksum": "6c30267267ddf8f3f2f8be8fd5367c85e27da598261379dc5773d4be45cf4e07"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for orders, combining order and order details from Northwind and ERP New System sources.", "columns": {"order_id": {"name": "order_id", "description": "Primary key of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to the customer. ", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "salesperson_id": {"name": "salesperson_id", "description": "Foreign key to the salesperson/employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "Date when the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Foreign key to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the product in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantity of the product in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_discount_percentage": {"name": "product_discount_percentage", "description": "Discount percentage applied to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_sales_revenue": {"name": "product_sales_revenue", "description": "Gross sales revenue for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_discount_value": {"name": "product_discount_value", "description": "Discount value for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gross_revenue": {"name": "gross_revenue", "description": "Gross revenue for the order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "net_revenue": {"name": "net_revenue", "description": "Net revenue for the order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "required_date": {"name": "required_date", "description": "Date requested for delivery.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "Date when the order was shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_flag": {"name": "shipped_flag", "description": "Indicates if the order was shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delayed_flag": {"name": "delayed_flag", "description": "Indicates if the order was delivered late.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delayed_days": {"name": "delayed_days", "description": "Number of days the delivery was delayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipping_time": {"name": "shipping_time", "description": "Total shipping time in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_via": {"name": "ship_via", "description": "Shipping company or method used for delivery.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_name": {"name": "ship_name", "description": "Name of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address": {"name": "ship_address", "description": "Street address of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_city": {"name": "ship_city", "description": "City of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_region": {"name": "ship_region", "description": "Region or state of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_postal_code": {"name": "ship_postal_code", "description": "Postal code of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_country": {"name": "ship_country", "description": "Country of the shipping location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "dbt_project://models/intermediate/int_fact_orders.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "ephemeral", "docs": {"node_color": "#c0c0c0"}}, "created_at": 1761245578.0600672, "relation_name": null, "raw_code": "/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n\nwith order_and_details_erp_new_system as (\n    select \n      s.sale_id         as order_id\n    , s.customer_id     as customer_id\n    , s.salesperson_id  as salesperson_id\n    , s.sale_date       as order_date\n    , sd.product_id     as product_id\n    , sd.price_per_unit as unit_price\n    , sd.qty            as quantity\n    , sd.discount_percentage                                       as product_discount_percentage\n    , (sd.price_per_unit * sd.qty)                                 as product_sales_revenue\n    , (sd.price_per_unit * sd.qty) * (sd.discount_percentage)      as product_discount_value\n    , (sd.price_per_unit * sd.qty)                                 as gross_revenue\n    , (sd.price_per_unit * sd.qty) * (1 - sd.discount_percentage)  as net_revenue\n    , s.required_delivery_date                                     as required_date\n    , s.shipped_date                                               as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from {{ ref('erp_new_system__sales') }} as s\n  left join {{ ref('erp_new_system__sales_details') }} as sd on sd.sale_id = s.sale_id\n  left join {{ ref(\"erp_new_system__address\") }} as a on s.ship_address_id = a.address_id\n  \n)\n, freight_as_order_and_details_erp_new_system as (\n    select \n      s.sale_id                   as order_id\n    , s.customer_id               as customer_id\n    , s.salesperson_id            as salesperson_id\n    , s.sale_date                 as order_date\n    , 'erp_new_system||P021'      as product_id\n    , s.freight_value             as unit_price\n    , 1                           as quantity\n    , 0                           as product_discount_percentage\n    , 0                           as product_sales_revenue\n    , 0                           as product_discount_value\n    , s.freight_value             as gross_revenue\n    , s.freight_value             as net_revenue\n    , s.required_delivery_date    as required_date\n    , s.shipped_date              as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from {{ ref('erp_new_system__sales') }} as s\n  left join {{ ref(\"erp_new_system__address\") }} as a on s.ship_address_id = a.address_id\n)\n/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n, order_and_details_northwind as (\n    select \n      o.order_id\n    , o.customer_id\n    , o.employee_id as salesperson_id\n    , o.order_date\n    , od.product_id\n    , od.unit_price\n    , od.quantity\n    , od.discount                                        as product_discount_percentage\n    , (od.unit_price * od.quantity)                      as product_sales_revenue\n    , (od.unit_price * od.quantity) * (od.discount)      as product_discount_value\n    , (od.unit_price * od.quantity)                      as gross_revenue\n    , (od.unit_price * od.quantity) * (1 - od.discount)  as net_revenue\n    , o.required_date\n    , o.shipped_date\n    , o.shipped_flag\n    , o.delayed_flag\n    , o.delayed_days\n    , o.shipping_time\n    , sv.description as ship_via\n    , o.ship_name\n    , o.ship_address\n    , o.ship_city\n    , o.ship_region\n    , o.ship_postal_code\n    , o.ship_country\n  from {{ ref('northwind__orders') }} as o\n  left join {{ ref('northwind__order_details') }} as od on o.order_id = od.order_id\n  left join {{ ref('northwind__ship_via') }} as sv on o.ship_via_id = sv.ship_via_id\n)\n, freight_as_order_detail_northwind as (\n    select \n        order_id\n      , customer_id\n      , employee_id as salesperson_id\n      , order_date\n      , 'northwind||78' as product_id\n      , freight as unit_price\n      , 1 as quantity\n      , 0 as product_discount_percentage\n      , 0 as product_sales_revenue\n      , 0 as product_discount_value\n      , freight as gross_revenue\n      , freight as net_revenue\n      , required_date\n      , shipped_date\n      , shipped_flag\n      , delayed_flag\n      , delayed_days\n      , shipping_time\n      , sv.description as ship_via\n      , ship_name\n      , ship_address\n      , ship_city\n      , ship_region\n      , ship_postal_code\n      , ship_country\n    from {{ ref('northwind__orders') }} as o\n    left join {{ ref('northwind__ship_via') }} as sv on o.ship_via_id = sv.ship_via_id\n)\n, fact_orders as (\n  select * from order_and_details_northwind\n  union all\n  select * from freight_as_order_detail_northwind\n  union all\n  select * from order_and_details_erp_new_system\n  union all\n  select * from freight_as_order_and_details_erp_new_system\n)\nselect * from fact_orders", "doc_blocks": [], "language": "sql", "refs": [{"name": "erp_new_system__sales", "package": null, "version": null}, {"name": "erp_new_system__sales_details", "package": null, "version": null}, {"name": "erp_new_system__address", "package": null, "version": null}, {"name": "erp_new_system__sales", "package": null, "version": null}, {"name": "erp_new_system__address", "package": null, "version": null}, {"name": "northwind__orders", "package": null, "version": null}, {"name": "northwind__order_details", "package": null, "version": null}, {"name": "northwind__ship_via", "package": null, "version": null}, {"name": "northwind__orders", "package": null, "version": null}, {"name": "northwind__ship_via", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.erp_new_system__sales", "model.dbt_project.erp_new_system__sales_details", "model.dbt_project.erp_new_system__address", "model.dbt_project.northwind__orders", "model.dbt_project.northwind__order_details", "model.dbt_project.northwind__ship_via"]}, "compiled_path": "target/compiled/dbt_project/models/intermediate/int_fact_orders.sql", "compiled": true, "compiled_code": "/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n\nwith order_and_details_erp_new_system as (\n    select \n      s.sale_id         as order_id\n    , s.customer_id     as customer_id\n    , s.salesperson_id  as salesperson_id\n    , s.sale_date       as order_date\n    , sd.product_id     as product_id\n    , sd.price_per_unit as unit_price\n    , sd.qty            as quantity\n    , sd.discount_percentage                                       as product_discount_percentage\n    , (sd.price_per_unit * sd.qty)                                 as product_sales_revenue\n    , (sd.price_per_unit * sd.qty) * (sd.discount_percentage)      as product_discount_value\n    , (sd.price_per_unit * sd.qty)                                 as gross_revenue\n    , (sd.price_per_unit * sd.qty) * (1 - sd.discount_percentage)  as net_revenue\n    , s.required_delivery_date                                     as required_date\n    , s.shipped_date                                               as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales` as s\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales_details` as sd on sd.sale_id = s.sale_id\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__address` as a on s.ship_address_id = a.address_id\n  \n)\n, freight_as_order_and_details_erp_new_system as (\n    select \n      s.sale_id                   as order_id\n    , s.customer_id               as customer_id\n    , s.salesperson_id            as salesperson_id\n    , s.sale_date                 as order_date\n    , 'erp_new_system||P021'      as product_id\n    , s.freight_value             as unit_price\n    , 1                           as quantity\n    , 0                           as product_discount_percentage\n    , 0                           as product_sales_revenue\n    , 0                           as product_discount_value\n    , s.freight_value             as gross_revenue\n    , s.freight_value             as net_revenue\n    , s.required_delivery_date    as required_date\n    , s.shipped_date              as shipped_date\n    , s.shipped_flag\n    , s.delayed_flag\n    , s.delayed_days\n    , s.shipping_time\n    , s.ship_via\n    , a.ship_name\n    , a.ship_address\n    , a.ship_city\n    , a.ship_region\n    , a.ship_postal_code\n    , a.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales` as s\n  left join `penna-airflow-dbt`.`prod_stage`.`erp_new_system__address` as a on s.ship_address_id = a.address_id\n)\n/*\n--------------------------------------------------------------------------------------------------\nTo create the fact_orders table, we need to join the order_resume table with the order_details table.\nThis join would create a replication of our freight column for each order_detail row.\nWe decided to create each freight as a product.\nSo we first create our order_and_details table and then add the freight as a product.\n--------------------------------------------------------------------------------------------------\n*/\n, order_and_details_northwind as (\n    select \n      o.order_id\n    , o.customer_id\n    , o.employee_id as salesperson_id\n    , o.order_date\n    , od.product_id\n    , od.unit_price\n    , od.quantity\n    , od.discount                                        as product_discount_percentage\n    , (od.unit_price * od.quantity)                      as product_sales_revenue\n    , (od.unit_price * od.quantity) * (od.discount)      as product_discount_value\n    , (od.unit_price * od.quantity)                      as gross_revenue\n    , (od.unit_price * od.quantity) * (1 - od.discount)  as net_revenue\n    , o.required_date\n    , o.shipped_date\n    , o.shipped_flag\n    , o.delayed_flag\n    , o.delayed_days\n    , o.shipping_time\n    , sv.description as ship_via\n    , o.ship_name\n    , o.ship_address\n    , o.ship_city\n    , o.ship_region\n    , o.ship_postal_code\n    , o.ship_country\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__orders` as o\n  left join `penna-airflow-dbt`.`prod_stage`.`northwind__order_details` as od on o.order_id = od.order_id\n  left join `penna-airflow-dbt`.`prod_stage`.`northwind__ship_via` as sv on o.ship_via_id = sv.ship_via_id\n)\n, freight_as_order_detail_northwind as (\n    select \n        order_id\n      , customer_id\n      , employee_id as salesperson_id\n      , order_date\n      , 'northwind||78' as product_id\n      , freight as unit_price\n      , 1 as quantity\n      , 0 as product_discount_percentage\n      , 0 as product_sales_revenue\n      , 0 as product_discount_value\n      , freight as gross_revenue\n      , freight as net_revenue\n      , required_date\n      , shipped_date\n      , shipped_flag\n      , delayed_flag\n      , delayed_days\n      , shipping_time\n      , sv.description as ship_via\n      , ship_name\n      , ship_address\n      , ship_city\n      , ship_region\n      , ship_postal_code\n      , ship_country\n    from `penna-airflow-dbt`.`prod_stage`.`northwind__orders` as o\n    left join `penna-airflow-dbt`.`prod_stage`.`northwind__ship_via` as sv on o.ship_via_id = sv.ship_via_id\n)\n, fact_orders as (\n  select * from order_and_details_northwind\n  union all\n  select * from freight_as_order_detail_northwind\n  union all\n  select * from order_and_details_erp_new_system\n  union all\n  select * from freight_as_order_and_details_erp_new_system\n)\nselect * from fact_orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.int_dim_shippers": {"database": "penna-airflow-dbt", "schema": "prod_intermediate", "name": "int_dim_shippers", "resource_type": "model", "package_name": "dbt_project", "path": "intermediate/int_dim_shippers.sql", "original_file_path": "models/intermediate/int_dim_shippers.sql", "unique_id": "model.dbt_project.int_dim_shippers", "fqn": ["dbt_project", "intermediate", "int_dim_shippers"], "alias": "int_dim_shippers", "checksum": {"name": "sha256", "checksum": "2fc5e536303cb223693d165469e07190bec0f5df54ab8333629e3b974ee24dff"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Shipper dimension from Northwind source.", "columns": {"shipper_id": {"name": "shipper_id", "description": "Primary key of the shipper.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipper": {"name": "shipper", "description": "Name of the shipping company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipper_phone": {"name": "shipper_phone", "description": "Phone number of the shipping company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipper_source": {"name": "shipper_source", "description": "Source system for the record: 'northwind'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "dbt_project://models/intermediate/int_dim_shippers.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "ephemeral", "docs": {"node_color": "#c0c0c0"}}, "created_at": 1761245578.0608335, "relation_name": null, "raw_code": "/*\n--------------------------------------------------------------------------------------------------\nOnly for Northwind\n--------------------------------------------------------------------------------------------------\n*/\nwith dim_shipper as (\n  select \n      shipper_id\n    , company_name as shipper\n    , phone        as shipper_phone\n    , 'northwind'  as shipper_source\n  from {{ ref('northwind__shippers') }}\n)\nselect * from dim_shipper", "doc_blocks": [], "language": "sql", "refs": [{"name": "northwind__shippers", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project.northwind__shippers"]}, "compiled_path": "target/compiled/dbt_project/models/intermediate/int_dim_shippers.sql", "compiled": true, "compiled_code": "/*\n--------------------------------------------------------------------------------------------------\nOnly for Northwind\n--------------------------------------------------------------------------------------------------\n*/\nwith dim_shipper as (\n  select \n      shipper_id\n    , company_name as shipper\n    , phone        as shipper_phone\n    , 'northwind'  as shipper_source\n  from `penna-airflow-dbt`.`prod_stage`.`northwind__shippers`\n)\nselect * from dim_shipper", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__sales_details": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__sales_details", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__sales_details.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__sales_details.sql", "unique_id": "model.dbt_project.erp_new_system__sales_details", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__sales_details"], "alias": "erp_new_system__sales_details", "checksum": {"name": "sha256", "checksum": "ebeba7636402248b6ace8f432bf63290d0d5c99aaaa44b4a7ba7362f1964c0c8"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"sale_id": {"name": "sale_id", "description": "Primary key of the sale. Value composed as 'erp_new_system||' + original sale_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Foreign key to the product. Value composed as 'erp_new_system||' + original product_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price_per_unit": {"name": "price_per_unit", "description": "Unit price of the product in the sale.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "qty": {"name": "qty", "description": "Quantity of products sold.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount_percentage": {"name": "discount_percentage", "description": "Discount percentage applied to the sale.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted": {"name": "deleted", "description": "Indicates if the record was deleted (soft delete).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__sales_details.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__sales_details.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1699593, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales_details`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || sale_id as sale_id\n    , 'erp_new_system||' || product_id as product_id\n    , price_per_unit\n    , qty\n    , discount_percentage\n    , deleted\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_sales_details') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_sales_details"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__sales_details.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || sale_id as sale_id\n    , 'erp_new_system||' || product_id as product_id\n    , price_per_unit\n    , qty\n    , discount_percentage\n    , deleted\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales_details`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__employee_hierarchy": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__employee_hierarchy", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__employee_hierarchy.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__employee_hierarchy.sql", "unique_id": "model.dbt_project.erp_new_system__employee_hierarchy", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__employee_hierarchy"], "alias": "erp_new_system__employee_hierarchy", "checksum": {"name": "sha256", "checksum": "af8f6242806cd813512aed509816f5f52c74bf1e7f06a763cabfc9cb79db3650"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee. Value composed as 'erp_new_system||' + original employee_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "boss_id": {"name": "boss_id", "description": "Foreign key to the immediate boss. Value composed as 'erp_new_system||' + original boss_id. Recursive relationship with employee_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_name": {"name": "employee_name", "description": "Full name of the employee.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hierarchy_path": {"name": "hierarchy_path", "description": "Hierarchical path from the top to this employee. E.g.: Nancy Davolio -> Andrew Fuller -> Janet Leverling.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hierarchy_level": {"name": "hierarchy_level", "description": "Hierarchy level of the employee. E.g.: 1 for top level, 2 for next, etc.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__employee_hierarchy.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__employee_hierarchy.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1677194, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__employee_hierarchy`", "raw_code": "WITH RECURSIVE new_employee_hierarchy AS (\n  -- Higher hierarchy employee (no one above them)\n  SELECT\n    e.employee_id as employee_id,\n    e.boss_id as boss_id,\n    e.name as employee_name,\n    CAST(e.name AS STRING) as hierarchy_path,\n    1 as hierarchy_level\n  FROM\n    {{ source('erp_new_system', 'aws_s3__erp_new_system__new_employees') }} e \n  WHERE boss_id IS NULL\n\n  UNION ALL\n  \n  -- Get recursively the employees where each iteracion is one level below\n  -- and we get the name of the employees creating a path from the higher hierarchy\n  -- to the lower\n  SELECT\n    e.employee_id as employee_id,\n    e.boss_id as boss_id ,\n    e.name as employee_name,\n    eh.hierarchy_path || ' -> ' || e.name as hierarchy_path,\n    eh.hierarchy_level + 1 as hierarchy_level \n  FROM\n    {{ source('erp_new_system', 'aws_s3__erp_new_system__new_employees') }} e\n  INNER JOIN\n    new_employee_hierarchy eh ON e.boss_id = eh.employee_id\n)\n, new_employees as (\n  select \n      'erp_new_system||' || employee_id as employee_id\n    , 'erp_new_system||' || boss_id as boss_id\n    , employee_name\n    , hierarchy_path\n    , hierarchy_level\n  from new_employee_hierarchy\n)\nSELECT * FROM new_employees", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_employees"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__employee_hierarchy.sql", "compiled": true, "compiled_code": "WITH RECURSIVE new_employee_hierarchy AS (\n  -- Higher hierarchy employee (no one above them)\n  SELECT\n    e.employee_id as employee_id,\n    e.boss_id as boss_id,\n    e.name as employee_name,\n    CAST(e.name AS STRING) as hierarchy_path,\n    1 as hierarchy_level\n  FROM\n    `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_employees` e \n  WHERE boss_id IS NULL\n\n  UNION ALL\n  \n  -- Get recursively the employees where each iteracion is one level below\n  -- and we get the name of the employees creating a path from the higher hierarchy\n  -- to the lower\n  SELECT\n    e.employee_id as employee_id,\n    e.boss_id as boss_id ,\n    e.name as employee_name,\n    eh.hierarchy_path || ' -> ' || e.name as hierarchy_path,\n    eh.hierarchy_level + 1 as hierarchy_level \n  FROM\n    `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_employees` e\n  INNER JOIN\n    new_employee_hierarchy eh ON e.boss_id = eh.employee_id\n)\n, new_employees as (\n  select \n      'erp_new_system||' || employee_id as employee_id\n    , 'erp_new_system||' || boss_id as boss_id\n    , employee_name\n    , hierarchy_path\n    , hierarchy_level\n  from new_employee_hierarchy\n)\nSELECT * FROM new_employees", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__suppliers": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__suppliers", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__suppliers.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__suppliers.sql", "unique_id": "model.dbt_project.erp_new_system__suppliers", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__suppliers"], "alias": "erp_new_system__suppliers", "checksum": {"name": "sha256", "checksum": "d0b21586723458e8b18b3051716cb66a83cb7962e763160c4ac98f3c9f6b6b75"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"supplier_id": {"name": "supplier_id", "description": "Primary key of the supplier. Value composed as 'erp_new_system||' + original supplier_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_name": {"name": "supplier_name", "description": "Name of the supplier.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_person": {"name": "contact_person", "description": "Main contact person at the supplier.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Supplier's contact phone number.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email": {"name": "email", "description": "Supplier's contact email address.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__suppliers.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__suppliers.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.0729578, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__suppliers`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || supplier_id as supplier_id\n    , supplier_name\n    , contact_person\n    , phone\n    , email\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_suppliers') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_suppliers"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__suppliers.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || supplier_id as supplier_id\n    , supplier_name\n    , contact_person\n    , phone\n    , email\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_suppliers`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__products": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__products", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__products.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__products.sql", "unique_id": "model.dbt_project.erp_new_system__products", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__products"], "alias": "erp_new_system__products", "checksum": {"name": "sha256", "checksum": "603155578a16ac4ed97cb1d7be0c9933f8fde960e4b1a96e6cd78ea995fe82cd"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"product_id": {"name": "product_id", "description": "Primary key of the product. Value composed as 'erp_new_system||' + original product_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the product.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Foreign key to the product category. Value composed as 'erp_new_system||' + original category_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "Foreign key to the supplier. Value composed as 'erp_new_system||' + original supplier_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__products.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__products.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.066183, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__products`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || product_id as product_id\n    , name\n    , 'erp_new_system||' || category_id as category_id\n    , 'erp_new_system||' || supplier_id as supplier_id\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_products') }}\n) \n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_products"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__products.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || product_id as product_id\n    , name\n    , 'erp_new_system||' || category_id as category_id\n    , 'erp_new_system||' || supplier_id as supplier_id\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_products`\n) \n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__sales": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__sales", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__sales.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__sales.sql", "unique_id": "model.dbt_project.erp_new_system__sales", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__sales"], "alias": "erp_new_system__sales", "checksum": {"name": "sha256", "checksum": "b45c93f9c48d155873caaa73ced0933f03a5fc8935632aef19319487713ba20d"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"sale_id": {"name": "sale_id", "description": "Primary key of the sale. Value composed as 'erp_new_system||' + original sale_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to the customer. Value composed as 'erp_new_system||' + original customer_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "salesperson_id": {"name": "salesperson_id", "description": "Foreign key to the salesperson. Value composed as 'erp_new_system||' + original salesperson_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address_id": {"name": "ship_address_id", "description": "Foreign key to the shipping address. Value composed as 'erp_new_system||' + original ship_address_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sale_date": {"name": "sale_date", "description": "Date when the sale occurred.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freight_value": {"name": "freight_value", "description": "Freight value for the sale.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "required_delivery_date": {"name": "required_delivery_date", "description": "Date requested for delivery by the customer.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "Date when the order was shipped.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_flag": {"name": "shipped_flag", "description": "Indicates if the order was shipped.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delayed_flag": {"name": "delayed_flag", "description": "Indicates if the order was delivered late.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delayed_days": {"name": "delayed_days", "description": "Number of days the delivery was delayed.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipping_time": {"name": "shipping_time", "description": "Total shipping time in days.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_via": {"name": "ship_via", "description": "Shipping company or method used for delivery.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__sales.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__sales.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.0650141, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__sales`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || sale_id         as sale_id\n    , 'erp_new_system||' || customer_id     as customer_id\n    , 'erp_new_system||' || salesperson_id  as salesperson_id\n    , 'erp_new_system||' || ship_address_id as ship_address_id\n    , sale_date\n    , freight_value\n    , required_delivery_date\n    , shipped_date\n    , case \n        when shipped_date is not null\n        then 'Yes' \n        else 'No' \n      end as shipped_flag\n    , case \n        when DATE_DIFF(shipped_date, required_delivery_date, DAY) > 0 \n        then 'Yes'\n        else 'No'\n      end as delayed_flag\n    , case \n        when DATE_DIFF(shipped_date, required_delivery_date, DAY) > 0 \n          then DATE_DIFF(shipped_date, required_delivery_date, DAY)\n        else NULL\n      end as delayed_days\n    , case\n        when shipped_date is not null \n        then DATE_DIFF(shipped_date, sale_date, DAY)\n        else NULL\n      end as shipping_time\n    , ship_via\n    \n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_sales') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_sales"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__sales.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || sale_id         as sale_id\n    , 'erp_new_system||' || customer_id     as customer_id\n    , 'erp_new_system||' || salesperson_id  as salesperson_id\n    , 'erp_new_system||' || ship_address_id as ship_address_id\n    , sale_date\n    , freight_value\n    , required_delivery_date\n    , shipped_date\n    , case \n        when shipped_date is not null\n        then 'Yes' \n        else 'No' \n      end as shipped_flag\n    , case \n        when DATE_DIFF(shipped_date, required_delivery_date, DAY) > 0 \n        then 'Yes'\n        else 'No'\n      end as delayed_flag\n    , case \n        when DATE_DIFF(shipped_date, required_delivery_date, DAY) > 0 \n          then DATE_DIFF(shipped_date, required_delivery_date, DAY)\n        else NULL\n      end as delayed_days\n    , case\n        when shipped_date is not null \n        then DATE_DIFF(shipped_date, sale_date, DAY)\n        else NULL\n      end as shipping_time\n    , ship_via\n    \n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__customers": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__customers", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__customers.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__customers.sql", "unique_id": "model.dbt_project.erp_new_system__customers", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__customers"], "alias": "erp_new_system__customers", "checksum": {"name": "sha256", "checksum": "6c38c289301ca7685d957914deecbd17f487df749257dffceebb40004b240c36"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key of the customer. Value composed as 'erp_new_system||' + original customer_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Name of the customer's company.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_name": {"name": "contact_name", "description": "Main contact person at the customer.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__customers.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__customers.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.0708444, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__customers`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || customer_id as customer_id\n    , company_name\n    , contact_name\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_customers') }}\n) \n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_customers"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__customers.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || customer_id as customer_id\n    , company_name\n    , contact_name\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_customers`\n) \n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__employees": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__employees", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__employees.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__employees.sql", "unique_id": "model.dbt_project.erp_new_system__employees", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__employees"], "alias": "erp_new_system__employees", "checksum": {"name": "sha256", "checksum": "3750b337ef450d65da71a2e640d04071dfc1ed67818068b6a7cebb2cbc52e5fd"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee. Value composed as 'erp_new_system||' + original employee_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the employee.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title": {"name": "title", "description": "Job title of the employee.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "boss_id": {"name": "boss_id", "description": "Foreign key to the immediate boss (employee_id).", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__employees.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__employees.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.0686603, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__employees`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || employee_id as employee_id\n    , name\n    , title\n    , 'erp_new_system||' || boss_id as boss_id\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_employees') }}\n) \nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_employees"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__employees.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || employee_id as employee_id\n    , name\n    , title\n    , 'erp_new_system||' || boss_id as boss_id\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_employees`\n) \nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__address": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__address", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__address.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__address.sql", "unique_id": "model.dbt_project.erp_new_system__address", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__address"], "alias": "erp_new_system__address", "checksum": {"name": "sha256", "checksum": "c60e8eb63dafe53b90691d5c8c21d5810879c3889134c4a91d9746139fd99dbf"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Address of our customers and others. Example: Ana Silva, 123 Main Street", "columns": {"address_id": {"name": "address_id", "description": "Primary key of the address. Value composed as 'erp_new_system||' + original address_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_name": {"name": "ship_name", "description": "Name of the shipping location.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address": {"name": "ship_address", "description": "Street address of the shipping location.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_city": {"name": "ship_city", "description": "City of the shipping location.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_region": {"name": "ship_region", "description": "Region or state of the shipping location. E.g.: IL, NY, MA, etc.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_postal_code": {"name": "ship_postal_code", "description": "Postal code of the shipping location.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_country": {"name": "ship_country", "description": "Country of the shipping location.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__address.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__address.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1687212, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__address`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || address_id as address_id\n    , ship_name\n    , ship_address\n    , ship_city\n    , ship_region\n    , cast(ship_postal_code as string) as ship_postal_code \n    , ship_country\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_address') }}\n) \nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_address"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__address.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || address_id as address_id\n    , ship_name\n    , ship_address\n    , ship_city\n    , ship_region\n    , cast(ship_postal_code as string) as ship_postal_code \n    , ship_country\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_address`\n) \nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.erp_new_system__categories": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "erp_new_system__categories", "resource_type": "model", "package_name": "dbt_project", "path": "stage/erp_new_system/erp_new_system__categories.sql", "original_file_path": "models/stage/erp_new_system/erp_new_system__categories.sql", "unique_id": "model.dbt_project.erp_new_system__categories", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system__categories"], "alias": "erp_new_system__categories", "checksum": {"name": "sha256", "checksum": "f0fc79e730507aff2e87674f144bd819e3e3f1de127642bf93ff3fe9667ca70a"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"category_id": {"name": "category_id", "description": "Primary key of the category. Value composed as 'erp_new_system||' + original category_id.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "Name of the product category.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/erp_new_system/erp_new_system__categories.yml", "build_path": "target/run/dbt_project/models/stage/erp_new_system/erp_new_system__categories.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.0672162, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`erp_new_system__categories`", "raw_code": "with source as (\n  select \n      'erp_new_system||' || category_id as category_id\n    , category_name\n  from {{ source('erp_new_system', 'aws_s3__erp_new_system__new_categories') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/erp_new_system__categories.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'erp_new_system||' || category_id as category_id\n    , category_name\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_categories`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__suppliers": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__suppliers", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__suppliers.sql", "original_file_path": "models/stage/northwind/northwind__suppliers.sql", "unique_id": "model.dbt_project.northwind__suppliers", "fqn": ["dbt_project", "stage", "northwind", "northwind__suppliers"], "alias": "northwind__suppliers", "checksum": {"name": "sha256", "checksum": "e4cd45e01bcc2042b28faaeeb26eecd87914b363a2283b5b5c0c8cf73b105b0a"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Suppliers. e.g.: Exotic Liquids, New Orleans Cajun Delights, etc.", "columns": {"supplier_id": {"name": "supplier_id", "description": "Primary key of the supplier, created as 'northwind||' concatenated with the original supplier_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Name of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_name": {"name": "contact_name", "description": "Contact name of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_title": {"name": "contact_title", "description": "Contact title of the supplier. e.g: Marketing Manager, Sales Representative, Owner, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address": {"name": "address", "description": "Address of the supplier. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City of the supplier. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Region of the supplier (state). There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Postal code of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Country of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fax": {"name": "fax", "description": "Fax of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "homepage": {"name": "homepage", "description": "Homepage of the supplier. A lot of empty values", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__suppliers.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__suppliers.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.189241, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__suppliers`", "raw_code": "with source as (\n  select \n      'northwind||' || supplier_id as supplier_id\n    , company_name\n    , contact_name\n    , contact_title\n    , address\n    , city\n    , region\n    , postal_code\n    , country\n    , phone\n    , fax\n    , homepage\n  from {{ source('northwind', 'aws_s3__erp_northwind__suppliers') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__suppliers"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__suppliers.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || supplier_id as supplier_id\n    , company_name\n    , contact_name\n    , contact_title\n    , address\n    , city\n    , region\n    , postal_code\n    , country\n    , phone\n    , fax\n    , homepage\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__suppliers`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__employee_hierarchy": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__employee_hierarchy", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__employee_hierarchy.sql", "original_file_path": "models/stage/northwind/northwind__employee_hierarchy.sql", "unique_id": "model.dbt_project.northwind__employee_hierarchy", "fqn": ["dbt_project", "stage", "northwind", "northwind__employee_hierarchy"], "alias": "northwind__employee_hierarchy", "checksum": {"name": "sha256", "checksum": "93f391d6be5022ae7c4970e5728eab5bfecd9b202fda79ea49413d4b984eab5f"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Employee hierarchy generated recursively from northwind__employees.", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee, created as 'northwind||' concatenated with the original employee_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reports_to": {"name": "reports_to", "description": "Id of the the person this employee reports to. This is related to employee_id at this table (recursive relationship)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_name": {"name": "employee_name", "description": "Name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hierarchy_path": {"name": "hierarchy_path", "description": "Path of the employee from the higher hierarchy to the lower. e.g.: Nancy Davolio -> Andrew Fuller -> Janet Leverling", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hierarchy_level": {"name": "hierarchy_level", "description": "Level of the employee in the hierarchy. e.g.: Nancy Davolio is level 1, Andrew Fuller is level 2, Janet Leverling is level 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__employee_hierarchy.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__employee_hierarchy.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1723924, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__employee_hierarchy`", "raw_code": "WITH RECURSIVE tmp_EmployeeHierarchy AS (\n  -- Higher hierarchy employee (no one above them)\n  SELECT\n    employee_id,\n    reports_to,\n    e.first_name || ' ' || e.last_name as employee_name,\n    CAST(e.first_name || ' ' || e.last_name AS STRING) as hierarchy_path,\n    1 as hierarchy_level\n  FROM\n    {{ source('northwind', 'aws_s3__erp_northwind__employees') }} e \n  WHERE reports_to IS NULL\n\n  UNION ALL\n  \n  -- Get recursively the employees where each iteracion is one level below\n  -- and we get the name of the employees creating a path from the higher hierarchy\n  -- to the lower\n  SELECT\n    e.employee_id,\n    e.reports_to,\n    e.first_name || ' ' || e.last_name as employee_name,\n    eh.hierarchy_path || ' -> ' || e.first_name || ' '|| e.last_name as hierarchy_path,\n    eh.hierarchy_level + 1 as hierarchy_level \n  FROM\n    {{ source('northwind', 'aws_s3__erp_northwind__employees') }} e\n  INNER JOIN\n    tmp_EmployeeHierarchy eh ON e.reports_to = eh.employee_id\n)\n, EmployeeHierarchy as (\n  SELECT\n    'northwind||' || employee_id as employee_id,\n    'northwind||' || reports_to as reports_to,\n    employee_name,\n    hierarchy_path,\n    hierarchy_level\n  FROM tmp_EmployeeHierarchy\n)\nSELECT * FROM EmployeeHierarchy", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employees"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__employee_hierarchy.sql", "compiled": true, "compiled_code": "WITH RECURSIVE tmp_EmployeeHierarchy AS (\n  -- Higher hierarchy employee (no one above them)\n  SELECT\n    employee_id,\n    reports_to,\n    e.first_name || ' ' || e.last_name as employee_name,\n    CAST(e.first_name || ' ' || e.last_name AS STRING) as hierarchy_path,\n    1 as hierarchy_level\n  FROM\n    `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees` e \n  WHERE reports_to IS NULL\n\n  UNION ALL\n  \n  -- Get recursively the employees where each iteracion is one level below\n  -- and we get the name of the employees creating a path from the higher hierarchy\n  -- to the lower\n  SELECT\n    e.employee_id,\n    e.reports_to,\n    e.first_name || ' ' || e.last_name as employee_name,\n    eh.hierarchy_path || ' -> ' || e.first_name || ' '|| e.last_name as hierarchy_path,\n    eh.hierarchy_level + 1 as hierarchy_level \n  FROM\n    `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees` e\n  INNER JOIN\n    tmp_EmployeeHierarchy eh ON e.reports_to = eh.employee_id\n)\n, EmployeeHierarchy as (\n  SELECT\n    'northwind||' || employee_id as employee_id,\n    'northwind||' || reports_to as reports_to,\n    employee_name,\n    hierarchy_path,\n    hierarchy_level\n  FROM tmp_EmployeeHierarchy\n)\nSELECT * FROM EmployeeHierarchy", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__orders": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__orders", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__orders.sql", "original_file_path": "models/stage/northwind/northwind__orders.sql", "unique_id": "model.dbt_project.northwind__orders", "fqn": ["dbt_project", "stage", "northwind", "northwind__orders"], "alias": "northwind__orders", "checksum": {"name": "sha256", "checksum": "8a5b6546d027d9fc81541aa48ed884240654584729cc01d201aa2eb5ed9b8161"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Order information like the customer, sales person, date, etc.", "columns": {"order_id": {"name": "order_id", "description": "Primary key of the order, created as 'northwind||' concatenated with the original order_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key of the customer, created as 'northwind||' concatenated with the original order_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_id": {"name": "employee_id", "description": "Foreign key of the employee, created as 'northwind||' concatenated with the original order_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_via_id": {"name": "ship_via_id", "description": "Foreign key of the ship via, created as 'northwind||' concatenated with the original order_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "Date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "required_date": {"name": "required_date", "description": "Required date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "Shipped date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freight": {"name": "freight", "description": "Freight value of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_name": {"name": "ship_name", "description": "Name of the ship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address": {"name": "ship_address", "description": "Address of the ship. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_city": {"name": "ship_city", "description": "City of the ship. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_region": {"name": "ship_region", "description": "Region of the ship (state). There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_postal_code": {"name": "ship_postal_code", "description": "Postal code of the ship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_country": {"name": "ship_country", "description": "Country of the ship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__orders.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__orders.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.174289, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__orders`", "raw_code": "with source as (\n  select \n      'northwind||' || order_id as order_id\n    , 'northwind||' || customer_id as customer_id\n    , 'northwind||' || employee_id as employee_id\n    , 'northwind||' || ship_via    as ship_via_id\n    , order_date\n    , freight\n    , required_date\n    , shipped_date\n    , case \n        when shipped_date is not null \n        then 'Yes' \n        else 'No' \n      end as shipped_flag\n    , case \n        when DATE_DIFF(shipped_date, required_date, DAY) > 0 \n        then 'Yes'\n        else 'No'\n      end as delayed_flag\n    , case \n        when DATE_DIFF(shipped_date, required_date, DAY) > 0 \n          then DATE_DIFF(shipped_date, required_date, DAY)\n        else NULL\n      end as delayed_days\n    , case\n        when shipped_date is not null \n        then DATE_DIFF(shipped_date, order_date, DAY)\n        else NULL\n      end as shipping_time\n    \n    , ship_name\n    , ship_address\n    , ship_city\n    , ship_region\n    , ship_postal_code\n    , ship_country\n  from {{ source('northwind', 'aws_s3__erp_northwind__orders') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__orders"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__orders.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || order_id as order_id\n    , 'northwind||' || customer_id as customer_id\n    , 'northwind||' || employee_id as employee_id\n    , 'northwind||' || ship_via    as ship_via_id\n    , order_date\n    , freight\n    , required_date\n    , shipped_date\n    , case \n        when shipped_date is not null \n        then 'Yes' \n        else 'No' \n      end as shipped_flag\n    , case \n        when DATE_DIFF(shipped_date, required_date, DAY) > 0 \n        then 'Yes'\n        else 'No'\n      end as delayed_flag\n    , case \n        when DATE_DIFF(shipped_date, required_date, DAY) > 0 \n          then DATE_DIFF(shipped_date, required_date, DAY)\n        else NULL\n      end as delayed_days\n    , case\n        when shipped_date is not null \n        then DATE_DIFF(shipped_date, order_date, DAY)\n        else NULL\n      end as shipping_time\n    \n    , ship_name\n    , ship_address\n    , ship_city\n    , ship_region\n    , ship_postal_code\n    , ship_country\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__orders`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__us_states": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__us_states", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__us_states.sql", "original_file_path": "models/stage/northwind/northwind__us_states.sql", "unique_id": "model.dbt_project.northwind__us_states", "fqn": ["dbt_project", "stage", "northwind", "northwind__us_states"], "alias": "northwind__us_states", "checksum": {"name": "sha256", "checksum": "57713d02b8de38b5c67d9c98d4814ea05082a615dfd2231800cc71c42ec68e82"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "United States states. e.g.: Alabama, Alaska, Arizona, etc.", "columns": {"state_id": {"name": "state_id", "description": "Primary key of the state, created as 'northwind||' concatenated with the original state_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_name": {"name": "state_name", "description": "Name of the state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_abbr": {"name": "state_abbr", "description": "Abbreviation of the state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_region": {"name": "state_region", "description": "Region of the state. e.g.: south, north, west, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__us_states.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__us_states.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1872685, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__us_states`", "raw_code": "with source as (\n  select \n      'northwind||' || state_id as state_id\n    , state_name\n    , state_abbr\n    , state_region\n  from {{ source('northwind', 'aws_s3__erp_northwind__us_states') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__us_states"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__us_states"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__us_states.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || state_id as state_id\n    , state_name\n    , state_abbr\n    , state_region\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__us_states`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__products": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__products", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__products.sql", "original_file_path": "models/stage/northwind/northwind__products.sql", "unique_id": "model.dbt_project.northwind__products", "fqn": ["dbt_project", "stage", "northwind", "northwind__products"], "alias": "northwind__products", "checksum": {"name": "sha256", "checksum": "f52de84f845ed56184d160557b67d60803823148c70d203bac81801c8bbb47db"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Products. e.g.: Chai, Chang, Aniseed Syrup, etc.", "columns": {"product_id": {"name": "product_id", "description": "Primary key of the product, created as 'northwind||' concatenated with the original product_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Name of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "Foreign key of the supplier, created as 'northwind||' concatenated with the original supplier_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Foreign key of the category, created as 'northwind||' concatenated with the original category_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity_per_unit": {"name": "quantity_per_unit", "description": "Description of quantity per unit of the product. e.g.: 10 boxes x 20 bags, 24 - 12 oz bottles, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_in_stock": {"name": "units_in_stock", "description": "Units in stock of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_on_order": {"name": "units_on_order", "description": "Units on order of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reorder_level": {"name": "reorder_level", "description": "Reorder level of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discontinued": {"name": "discontinued", "description": "Discontinued flag of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__products.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__products.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1833427, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__products`", "raw_code": "with source as (\n  select \n      'northwind||' || product_id as product_id\n    , product_name\n    , 'northwind||' || supplier_id as supplier_id\n    , 'northwind||' || category_id as category_id\n    , quantity_per_unit\n    , unit_price\n    , units_in_stock\n    , units_on_order\n    , reorder_level\n    , discontinued\n  from {{ source('northwind', 'aws_s3__erp_northwind__products') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__products"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__products.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || product_id as product_id\n    , product_name\n    , 'northwind||' || supplier_id as supplier_id\n    , 'northwind||' || category_id as category_id\n    , quantity_per_unit\n    , unit_price\n    , units_in_stock\n    , units_on_order\n    , reorder_level\n    , discontinued\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__products`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__categories": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__categories", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__categories.sql", "original_file_path": "models/stage/northwind/northwind__categories.sql", "unique_id": "model.dbt_project.northwind__categories", "fqn": ["dbt_project", "stage", "northwind", "northwind__categories"], "alias": "northwind__categories", "checksum": {"name": "sha256", "checksum": "96e0d14395aef5638cf08e68d3747116e58ee193220fabf272133557080a2a94"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Product categories. e.g.: beverages, condiments, dairy products, etc.", "columns": {"category_id": {"name": "category_id", "description": "Primary key of the category, created as 'northwind||' concatenated with the original category_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "Name of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Detailed description of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "picture": {"name": "picture", "description": "Should be the picture of the category but it is empty", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__categories.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__categories.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1906068, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__categories`", "raw_code": "with source as (\n  select \n      'northwind||' || category_id as category_id\n    , category_name\n    , description\n    , picture\n  from {{ source('northwind', 'aws_s3__erp_northwind__categories') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__categories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__categories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__categories.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || category_id as category_id\n    , category_name\n    , description\n    , picture\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__categories`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__employees": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__employees", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__employees.sql", "original_file_path": "models/stage/northwind/northwind__employees.sql", "unique_id": "model.dbt_project.northwind__employees", "fqn": ["dbt_project", "stage", "northwind", "northwind__employees"], "alias": "northwind__employees", "checksum": {"name": "sha256", "checksum": "ba1d3a0b4f7cf7fb29aac7a6dec27402c9991575f0cd0ae5e400a32cff92bcc6"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Employees. e.g.: Nancy Davolio, Andrew Fuller, Janet Leverling, etc.", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee, created as 'northwind||' concatenated with the original employee_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_name": {"name": "last_name", "description": "Last name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_name": {"name": "first_name", "description": "First name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title": {"name": "title", "description": "Title of the employee. e.g.: Sales Representative, Sales Agent, Owner, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title_of_courtesy": {"name": "title_of_courtesy", "description": "Title of courtesy of the employee. e.g.: Ms., Mr., Mrs., Dr., etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "birth_date": {"name": "birth_date", "description": "Birth date of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hire_date": {"name": "hire_date", "description": "Hire date of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address": {"name": "address", "description": "Address of the employee. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City of the employee. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Region of the employee (state). There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Postal code of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Country of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "home_phone": {"name": "home_phone", "description": "Home phone of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extension": {"name": "extension", "description": "Extension of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "notes": {"name": "notes", "description": "Notes of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reports_to": {"name": "reports_to", "description": "Reports to of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__employees.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__employees.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1805358, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__employees`", "raw_code": "with source as (\n  select \n      'northwind||' || employee_id as employee_id\n    , last_name\n    , first_name\n    , title\n    , title_of_courtesy\n    , birth_date\n    , hire_date\n    , address\n    , city\n    , region\n    , postal_code\n    , country\n    , home_phone\n    , extension\n    , photo\n    , notes\n    , 'northwind||' || reports_to as reports_to\n  from {{ source('northwind', 'aws_s3__erp_northwind__employees') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employees"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__employees.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || employee_id as employee_id\n    , last_name\n    , first_name\n    , title\n    , title_of_courtesy\n    , birth_date\n    , hire_date\n    , address\n    , city\n    , region\n    , postal_code\n    , country\n    , home_phone\n    , extension\n    , photo\n    , notes\n    , 'northwind||' || reports_to as reports_to\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__region": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__region", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__region.sql", "original_file_path": "models/stage/northwind/northwind__region.sql", "unique_id": "model.dbt_project.northwind__region", "fqn": ["dbt_project", "stage", "northwind", "northwind__region"], "alias": "northwind__region", "checksum": {"name": "sha256", "checksum": "94bbdee66adf82cf93d8fbfd71eeee0064b6971edb7e1266a45a61a1847d9c2e"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Region information. E.g: Eastern, Western, etc.", "columns": {"region_id": {"name": "region_id", "description": "Primary key of the region, created as 'northwind||' concatenated with the original region_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region_description": {"name": "region_description", "description": "Description of the region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__region.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__region.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1712825, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__region`", "raw_code": "with source as (\n  select \n      'northwind||' || region_id as region_id\n    , region_description\n  from {{ source('northwind', 'aws_s3__erp_northwind__region') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__region"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__region"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__region.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || region_id as region_id\n    , region_description\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__region`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__employee_territories": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__employee_territories", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__employee_territories.sql", "original_file_path": "models/stage/northwind/northwind__employee_territories.sql", "unique_id": "model.dbt_project.northwind__employee_territories", "fqn": ["dbt_project", "stage", "northwind", "northwind__employee_territories"], "alias": "northwind__employee_territories", "checksum": {"name": "sha256", "checksum": "3c937b5cdc86cd0a1cc191fde41cde2967a7ddc0737cdaeb33666785e2e21428"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Relationship between employees and territories", "columns": {"employee_id": {"name": "employee_id", "description": "Foreign key of the employee, created as 'northwind||' concatenated with the original employee_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "territory_id": {"name": "territory_id", "description": "Foreign key of the territory, created as 'northwind||' concatenated with the original territory_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__employee_territories.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__employee_territories.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1752982, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__employee_territories`", "raw_code": "with source as (\n  select \n      'northwind||' || employee_id as employee_id\n    , 'northwind||' || territory_id as territory_id\n  from {{ source('northwind', 'aws_s3__erp_northwind__employee_territories') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employee_territories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__employee_territories.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || employee_id as employee_id\n    , 'northwind||' || territory_id as territory_id\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employee_territories`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__ship_via": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__ship_via", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__ship_via.sql", "original_file_path": "models/stage/northwind/northwind__ship_via.sql", "unique_id": "model.dbt_project.northwind__ship_via", "fqn": ["dbt_project", "stage", "northwind", "northwind__ship_via"], "alias": "northwind__ship_via", "checksum": {"name": "sha256", "checksum": "e288a8aa002a1b9bef4e847acff1e531c9d1f1cef948709634636b24c44c7c23"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Shipping methods used in orders. e.g.: ship via companies or methods.", "columns": {"ship_via_id": {"name": "ship_via_id", "description": "Primary key of the shipping method, created as 'northwind||' concatenated with the original ship_via_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Description of the shipping method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__ship_via.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__ship_via.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.2026038, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__ship_via`", "raw_code": "with source as (\n  select \n      'northwind||' || ship_via_id as ship_via_id\n    , description\nfrom {{ source('northwind', 'aws_s3__erp_northwind__ship_via') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__ship_via"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__ship_via"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__ship_via.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || ship_via_id as ship_via_id\n    , description\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__ship_via`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__shippers": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__shippers", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__shippers.sql", "original_file_path": "models/stage/northwind/northwind__shippers.sql", "unique_id": "model.dbt_project.northwind__shippers", "fqn": ["dbt_project", "stage", "northwind", "northwind__shippers"], "alias": "northwind__shippers", "checksum": {"name": "sha256", "checksum": "486873bf45aa8a6e46f5493e271b21f31243683f91de8f66d2dcfa139714bcd7"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Companies responsable for shipping. e.g.: Speedy Express, United Package, etc.", "columns": {"shipper_id": {"name": "shipper_id", "description": "Primary key of the shipper, created as 'northwind||' concatenated with the original shipper_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Name of the shipper", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone of the shipper", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__shippers.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__shippers.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.1851091, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__shippers`", "raw_code": "with source as (\n  select \n      'northwind||' || shipper_id as shipper_id\n    , company_name\n    , phone\n  from {{ source('northwind', 'aws_s3__erp_northwind__shippers') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__shippers"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__shippers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__shippers.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || shipper_id as shipper_id\n    , company_name\n    , phone\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__shippers`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__order_details": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__order_details", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__order_details.sql", "original_file_path": "models/stage/northwind/northwind__order_details.sql", "unique_id": "model.dbt_project.northwind__order_details", "fqn": ["dbt_project", "stage", "northwind", "northwind__order_details"], "alias": "northwind__order_details", "checksum": {"name": "sha256", "checksum": "f1ccc83313595bba1cb267146d2edffc169418c2b45e4eef051a4a266d768aa5"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Detail of each order like which products, unit price, qty, was bought, etc.", "columns": {"order_id": {"name": "order_id", "description": "Foreign key of the order, created as 'northwind||' concatenated with the original order_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Foreign key of the product, created as 'northwind||' concatenated with the original product_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantity of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount": {"name": "discount", "description": "Discount of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__order_details.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__order_details.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.2034101, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__order_details`", "raw_code": "with source as (\n  select \n      'northwind||' || order_id   as order_id\n    , 'northwind||' || product_id as product_id\n    , unit_price\n    , quantity\n    , discount\n  from {{ source('northwind', 'aws_s3__erp_northwind__order_details') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__order_details"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__order_details.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || order_id   as order_id\n    , 'northwind||' || product_id as product_id\n    , unit_price\n    , quantity\n    , discount\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__customers": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__customers", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__customers.sql", "original_file_path": "models/stage/northwind/northwind__customers.sql", "unique_id": "model.dbt_project.northwind__customers", "fqn": ["dbt_project", "stage", "northwind", "northwind__customers"], "alias": "northwind__customers", "checksum": {"name": "sha256", "checksum": "eb6f2aa4c31aa534f0237ab0d5034131d015f89152c3ff9214cbaaceedc137be"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Customers. e.g.: Cactus Comidas para llevar, Rancho grande, etc.", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key of the customer, created as 'northwind||' concatenated with the original customer_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Name of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_name": {"name": "contact_name", "description": "Name of the contact person", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_title": {"name": "contact_title", "description": "Title of the contact person. e.g.: Sales Representative, Sales Agent, Owner, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address": {"name": "address", "description": "Address of the company. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City of the company. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Region of the company (in some cases it is the UF of the state other cases it is full name of state). e.g: RJ, SP, Qu\u00e9bec, etc. There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Postal code of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Country of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fax": {"name": "fax", "description": "Fax of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__customers.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__customers.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.2045126, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__customers`", "raw_code": "with source as (\n  select \n      'northwind||' || customer_id as customer_id\n    , company_name\n    , contact_name\n    , contact_title\n    , address\n    , city\n    , region\n    , postal_code\n    , country\n    , phone\n    , fax\n  from {{ source('northwind', 'aws_s3__erp_northwind__customers') }}\n)\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__customers"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__customers.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || customer_id as customer_id\n    , company_name\n    , contact_name\n    , contact_title\n    , address\n    , city\n    , region\n    , postal_code\n    , country\n    , phone\n    , fax\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__customers`\n)\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project.northwind__territories": {"database": "penna-airflow-dbt", "schema": "prod_stage", "name": "northwind__territories", "resource_type": "model", "package_name": "dbt_project", "path": "stage/northwind/northwind__territories.sql", "original_file_path": "models/stage/northwind/northwind__territories.sql", "unique_id": "model.dbt_project.northwind__territories", "fqn": ["dbt_project", "stage", "northwind", "northwind__territories"], "alias": "northwind__territories", "checksum": {"name": "sha256", "checksum": "2f0a66b54dcc330c30edf357b1ec423a2abf5b4b0507234aa5d4bc2021c65b60"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Territories (cities). e.g.: Boston, Cambridge, Orlando, etc.", "columns": {"territory_id": {"name": "territory_id", "description": "Primary key of the territory, created as 'northwind||' concatenated with the original territory_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "territory_description": {"name": "territory_description", "description": "Description of the territory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region_id": {"name": "region_id", "description": "Foreign key of the region. e.g.: western, eastern, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project://models/stage/northwind/northwind__territories.yml", "build_path": "target/run/dbt_project/models/stage/northwind/northwind__territories.sql", "unrendered_config": {"schema": "stage", "materialized": "table"}, "created_at": 1761245578.184382, "relation_name": "`penna-airflow-dbt`.`prod_stage`.`northwind__territories`", "raw_code": "with source as (\n  select \n      'northwind||' || territory_id as territory_id\n    , territory_description\n    , region_id\n  from {{ source('northwind', 'aws_s3__erp_northwind__territories') }}\n)\n\nselect * from source", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__territories"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__territories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/northwind__territories.sql", "compiled": true, "compiled_code": "with source as (\n  select \n      'northwind||' || territory_id as territory_id\n    , territory_description\n    , region_id\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__territories`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "snapshot.dbt_project.products_snapshot": {"database": "penna-airflow-dbt", "schema": "prod_stage_northwind", "name": "products_snapshot", "resource_type": "snapshot", "package_name": "dbt_project", "path": "northwind/products.sql", "original_file_path": "snapshots/northwind/products.sql", "unique_id": "snapshot.dbt_project.products_snapshot", "fqn": ["dbt_project", "northwind", "products", "products_snapshot"], "alias": "products_snapshot", "checksum": {"name": "sha256", "checksum": "260d125210032fae53693033de89afec5a4159e6106363b07da1e93575dba300"}, "config": {"enabled": true, "alias": null, "schema": "stage_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "product_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": ["supplier_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level"], "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/snapshots/northwind/products.sql", "unrendered_config": {"schema": "stage_northwind", "unique_key": "product_id", "strategy": "check", "check_cols": ["supplier_id", "quantity_per_unit", "unit_price", "units_in_stock", "units_on_order", "reorder_level"]}, "created_at": 1761245577.7250235, "relation_name": "`penna-airflow-dbt`.`prod_stage_northwind`.`products_snapshot`", "raw_code": "\n\n{{\n  config(\n    unique_key='product_id',\n    strategy='check',\n    check_cols=['supplier_id', 'quantity_per_unit', 'unit_price', 'units_in_stock', 'units_on_order', 'reorder_level']\n  )\n}}\n\n\n\nwith source as (\n  select \n      product_id\n    , product_name\n    , supplier_id\n    , quantity_per_unit\n    , unit_price\n    , units_in_stock\n    , units_on_order\n    , reorder_level\n  from {{ source('northwind', 'aws_s3__erp_northwind__products') }}\n)\n\nselect * from source\n\n", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__products"]], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\n\n\nwith source as (\n  select \n      product_id\n    , product_name\n    , supplier_id\n    , quantity_per_unit\n    , unit_price\n    , units_in_stock\n    , units_on_order\n    , reorder_level\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__products`\n)\n\nselect * from source\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.dbt_project.new_sales_details": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_sales_details", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_sales_details.csv", "original_file_path": "seeds/erp_new_system/new_sales_details.csv", "unique_id": "seed.dbt_project.new_sales_details", "fqn": ["dbt_project", "erp_new_system", "new_sales_details"], "alias": "new_sales_details", "checksum": {"name": "sha256", "checksum": "261a3266699f2b6d8d618b3fe8ac89a65b0021bde4aa36778973be86b5558b01"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_sales_details.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.8981264, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_sales_details`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_address": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_address", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_address.csv", "original_file_path": "seeds/erp_new_system/new_address.csv", "unique_id": "seed.dbt_project.new_address", "fqn": ["dbt_project", "erp_new_system", "new_address"], "alias": "new_address", "checksum": {"name": "sha256", "checksum": "01e611e2a580b3c29c4708ea68c75a487e317188fa4f462a2e81539407a56039"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_address.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.9005103, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_address`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_suppliers": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_suppliers", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_suppliers.csv", "original_file_path": "seeds/erp_new_system/new_suppliers.csv", "unique_id": "seed.dbt_project.new_suppliers", "fqn": ["dbt_project", "erp_new_system", "new_suppliers"], "alias": "new_suppliers", "checksum": {"name": "sha256", "checksum": "f58d0800664716ea5d1c0000088faac9517a0266e7b235a5f919cc05c661c473"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_suppliers.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.9026175, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_suppliers`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_customers": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_customers", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_customers.csv", "original_file_path": "seeds/erp_new_system/new_customers.csv", "unique_id": "seed.dbt_project.new_customers", "fqn": ["dbt_project", "erp_new_system", "new_customers"], "alias": "new_customers", "checksum": {"name": "sha256", "checksum": "13c856bd60189c36a74340bd6d2dd546ef6b5f37053e23497ada9c4dfc27e93d"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_customers.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.904683, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_customers`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_products": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_products", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_products.csv", "original_file_path": "seeds/erp_new_system/new_products.csv", "unique_id": "seed.dbt_project.new_products", "fqn": ["dbt_project", "erp_new_system", "new_products"], "alias": "new_products", "checksum": {"name": "sha256", "checksum": "4804db05b16d827858758e5523ba2f33ace29dd41cc1489e14c96849e0c2e650"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_products.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.9068034, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_products`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_sales": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_sales", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_sales.csv", "original_file_path": "seeds/erp_new_system/new_sales.csv", "unique_id": "seed.dbt_project.new_sales", "fqn": ["dbt_project", "erp_new_system", "new_sales"], "alias": "new_sales", "checksum": {"name": "sha256", "checksum": "120093d4cb18888f601d83bae50a6abe2fea9055ee2f2da7c7e7079d687e544a"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_sales.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.909027, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_sales`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_employees": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_employees", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_employees.csv", "original_file_path": "seeds/erp_new_system/new_employees.csv", "unique_id": "seed.dbt_project.new_employees", "fqn": ["dbt_project", "erp_new_system", "new_employees"], "alias": "new_employees", "checksum": {"name": "sha256", "checksum": "160516cbf1fc447341e3eaa4326ae9e26b4767a5be3798c2632241b65a41fed7"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_employees.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.911094, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_employees`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.new_categories": {"database": "penna-airflow-dbt", "schema": "raw_erp_new_system", "name": "new_categories", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_new_system/new_categories.csv", "original_file_path": "seeds/erp_new_system/new_categories.csv", "unique_id": "seed.dbt_project.new_categories", "fqn": ["dbt_project", "erp_new_system", "new_categories"], "alias": "new_categories", "checksum": {"name": "sha256", "checksum": "9950ea431c901dfd348e70089a9648c09d87cfaf0404b32f065c494197226cfa"}, "config": {"enabled": true, "alias": null, "schema": "raw_erp_new_system", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_new_system/new_categories.csv", "unrendered_config": {"schema": "raw_erp_new_system"}, "created_at": 1761245577.9131489, "relation_name": "`penna-airflow-dbt`.`raw_erp_new_system`.`new_categories`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.order_details": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "order_details", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/order_details.csv", "original_file_path": "seeds/erp_northwind/order_details.csv", "unique_id": "seed.dbt_project.order_details", "fqn": ["dbt_project", "erp_northwind", "order_details"], "alias": "order_details", "checksum": {"name": "sha256", "checksum": "05b6b83d95e75ba181821ca2ae997fc5b3588455490f959c37032511d1ffd0b9"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/order_details.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.915197, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`order_details`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.customers": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "customers", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/customers.csv", "original_file_path": "seeds/erp_northwind/customers.csv", "unique_id": "seed.dbt_project.customers", "fqn": ["dbt_project", "erp_northwind", "customers"], "alias": "customers", "checksum": {"name": "sha256", "checksum": "81513e3cbfb54237e02f91fdb403c6f55fa4d1c4567d24c2e356559ab31dce38"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/customers.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.917238, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`customers`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.categories": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "categories", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/categories.csv", "original_file_path": "seeds/erp_northwind/categories.csv", "unique_id": "seed.dbt_project.categories", "fqn": ["dbt_project", "erp_northwind", "categories"], "alias": "categories", "checksum": {"name": "sha256", "checksum": "72675cb443b64bc97c43bea91ca0db869e223d5d90513a24fc6272a71c85a3d7"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/categories.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.919276, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`categories`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.shippers": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "shippers", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/shippers.csv", "original_file_path": "seeds/erp_northwind/shippers.csv", "unique_id": "seed.dbt_project.shippers", "fqn": ["dbt_project", "erp_northwind", "shippers"], "alias": "shippers", "checksum": {"name": "sha256", "checksum": "8d9958986bca45c1e71871181aad8289be6ebfe4f768a2d8d03ef5198cc5210d"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/shippers.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9214904, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`shippers`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.region": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "region", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/region.csv", "original_file_path": "seeds/erp_northwind/region.csv", "unique_id": "seed.dbt_project.region", "fqn": ["dbt_project", "erp_northwind", "region"], "alias": "region", "checksum": {"name": "sha256", "checksum": "6d5689c0e96ad7a0a1688b6c9eee665157ed45376ea87546430c5900f42f74ca"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/region.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.92358, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`region`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.customer_customer_demo": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "customer_customer_demo", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/customer_customer_demo.csv", "original_file_path": "seeds/erp_northwind/customer_customer_demo.csv", "unique_id": "seed.dbt_project.customer_customer_demo", "fqn": ["dbt_project", "erp_northwind", "customer_customer_demo"], "alias": "customer_customer_demo", "checksum": {"name": "sha256", "checksum": "f7fe2f3926ae6489a724c98f554075ea0a941a86df09a7c3145d7a1aab0c6ee6"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/customer_customer_demo.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9256327, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`customer_customer_demo`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.suppliers": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "suppliers", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/suppliers.csv", "original_file_path": "seeds/erp_northwind/suppliers.csv", "unique_id": "seed.dbt_project.suppliers", "fqn": ["dbt_project", "erp_northwind", "suppliers"], "alias": "suppliers", "checksum": {"name": "sha256", "checksum": "20e054ab9e129e88bced6a528cf37db6fb499c16f42ac48a1cf239c254956c92"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/suppliers.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.927674, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`suppliers`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.employee_territories": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "employee_territories", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/employee_territories.csv", "original_file_path": "seeds/erp_northwind/employee_territories.csv", "unique_id": "seed.dbt_project.employee_territories", "fqn": ["dbt_project", "erp_northwind", "employee_territories"], "alias": "employee_territories", "checksum": {"name": "sha256", "checksum": "8f2254289a4c1cd32b371dc3afce2656e9ceb4fdcbd4e8bd8b6efcebf2f4156e"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/employee_territories.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9297225, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`employee_territories`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.ship_via": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "ship_via", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/ship_via.csv", "original_file_path": "seeds/erp_northwind/ship_via.csv", "unique_id": "seed.dbt_project.ship_via", "fqn": ["dbt_project", "erp_northwind", "ship_via"], "alias": "ship_via", "checksum": {"name": "sha256", "checksum": "a339328da3801464a9a9d518ee79a5a3f8e5b25b82cc1fd6109cc958a8945062"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/ship_via.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9317763, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`ship_via`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.territories": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "territories", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/territories.csv", "original_file_path": "seeds/erp_northwind/territories.csv", "unique_id": "seed.dbt_project.territories", "fqn": ["dbt_project", "erp_northwind", "territories"], "alias": "territories", "checksum": {"name": "sha256", "checksum": "6c7fce7b78e02ff118a9847f280c2bd0e32f628df0c89f5bb868dee6d6b57762"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/territories.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.933898, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`territories`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.products": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "products", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/products.csv", "original_file_path": "seeds/erp_northwind/products.csv", "unique_id": "seed.dbt_project.products", "fqn": ["dbt_project", "erp_northwind", "products"], "alias": "products", "checksum": {"name": "sha256", "checksum": "a2f05f9a6f453994c29b515b14a0e5f3acbcf58f278647709275ca0826c8dc6c"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/products.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9359355, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`products`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.customer_demographics": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "customer_demographics", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/customer_demographics.csv", "original_file_path": "seeds/erp_northwind/customer_demographics.csv", "unique_id": "seed.dbt_project.customer_demographics", "fqn": ["dbt_project", "erp_northwind", "customer_demographics"], "alias": "customer_demographics", "checksum": {"name": "sha256", "checksum": "6f2c1aaa75c4e8cac45ccf1b071c761307b5dfa08a2ceea15caf1529b06cac03"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/customer_demographics.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9379528, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`customer_demographics`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.us_states": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "us_states", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/us_states.csv", "original_file_path": "seeds/erp_northwind/us_states.csv", "unique_id": "seed.dbt_project.us_states", "fqn": ["dbt_project", "erp_northwind", "us_states"], "alias": "us_states", "checksum": {"name": "sha256", "checksum": "26322355e86c5fc5978c790855818625005626c059f3be5be5abd8b49ab602c2"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/us_states.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9399724, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`us_states`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.employees": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "employees", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/employees.csv", "original_file_path": "seeds/erp_northwind/employees.csv", "unique_id": "seed.dbt_project.employees", "fqn": ["dbt_project", "erp_northwind", "employees"], "alias": "employees", "checksum": {"name": "sha256", "checksum": "fa4b0719a617fc02cd53c20bd28346cd0e7824cced350eeae93b1de126ec1c34"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/employees.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9420154, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`employees`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "seed.dbt_project.orders": {"database": "penna-airflow-dbt", "schema": "raw_northwind", "name": "orders", "resource_type": "seed", "package_name": "dbt_project", "path": "erp_northwind/orders.csv", "original_file_path": "seeds/erp_northwind/orders.csv", "unique_id": "seed.dbt_project.orders", "fqn": ["dbt_project", "erp_northwind", "orders"], "alias": "orders", "checksum": {"name": "sha256", "checksum": "0cee3a57b252764effff631b98efd556f2e88a227ddde67056d53772feceea2e"}, "config": {"enabled": true, "alias": null, "schema": "raw_northwind", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/seeds/erp_northwind/orders.csv", "unrendered_config": {"schema": "raw_northwind"}, "created_at": 1761245577.9440422, "relation_name": "`penna-airflow-dbt`.`raw_northwind`.`orders`", "raw_code": "", "doc_blocks": [], "root_path": "dbt_project", "depends_on": {"macros": []}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id.04a5fae560": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id.04a5fae560", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id"], "alias": "source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277"}, "created_at": 1761245578.3160982, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_address"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_8c8264bbefd22c5fccb5ea9c7182b277.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select address_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_address`\n  where address_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_address')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id.daa8721bb5": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_45681f0ced417130d484704af121560f.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id.daa8721bb5", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id"], "alias": "source_not_null_erp_new_system_45681f0ced417130d484704af121560f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_45681f0ced417130d484704af121560f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_45681f0ced417130d484704af121560f.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_45681f0ced417130d484704af121560f"}, "created_at": 1761245578.317879, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_45681f0ced417130d484704af121560f\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_address"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_45681f0ced417130d484704af121560f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_address`\nwhere address_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_address')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.863ac0d10c": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.863ac0d10c", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id"], "alias": "source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56"}, "created_at": 1761245578.3429775, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_160482704263d6ee4e7e4339f7c92f56.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select category_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_categories`\n  where category_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_categories')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.c0902ca528": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.c0902ca528", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id"], "alias": "source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e"}, "created_at": 1761245578.3446999, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_d637cbe8ff15e600bcb21efea8eb0d3e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_categories`\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_categories')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.2854f11578": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.2854f11578", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id"], "alias": "source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4"}, "created_at": 1761245578.3468432, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_customers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_50fbfe33c827a13d3ca7ff6ff6ff40c4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_customers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.19a63c424a": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.19a63c424a", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id"], "alias": "source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0"}, "created_at": 1761245578.3483815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_customers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_ab15506f2fe91aa89455f6e6566897e0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_customers')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.cab7819ba9": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.cab7819ba9", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id"], "alias": "source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2"}, "created_at": 1761245578.3504515, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_employees"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_0ebbecc775fd3483e0226d4a9025cde2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select employee_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_employees`\n  where employee_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_employees')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.213b5e40ba": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.213b5e40ba", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id"], "alias": "source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda"}, "created_at": 1761245578.3519378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_employees"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_beadb122d5eb54cae213a141f7c5ccda.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_employees`\nwhere employee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_employees')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id.44494d6ce0": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id.44494d6ce0", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id"], "alias": "source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74"}, "created_at": 1761245578.354097, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_fc15d29923754dde04f74d0175070e74.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select product_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_products`\n  where product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_products')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id.ed855a5aa1": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id.ed855a5aa1", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id"], "alias": "source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0"}, "created_at": 1761245578.3555593, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_055bfa43d6fd64593375851f94f670d0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_products`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_products')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.683feea94c": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.683feea94c", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id"], "alias": "source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4"}, "created_at": 1761245578.3576398, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_sales"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_7d4de004a399d498d1be30a1f6097fe4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select sale_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales`\n  where sale_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sale_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "sale_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_sales')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.8b084b15ec": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.8b084b15ec", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id"], "alias": "source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8"}, "created_at": 1761245578.3591368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_sales"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_12da3e31e31161e804714013ee8782f8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sale_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales`\nwhere sale_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sale_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sale_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_sales')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id.e7b8d96015": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id.e7b8d96015", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id"], "alias": "source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded"}, "created_at": 1761245578.3606117, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_sales"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_95d73e4e7996140c1e1e1432ea4b4ded.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_sales')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.a4cbc601cf": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.a4cbc601cf", "fqn": ["dbt_project", "stage", "erp_new_system", "source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id"], "alias": "source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c.sql", "unrendered_config": {"alias": "source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c"}, "created_at": 1761245578.3633282, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_suppliers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_unique_erp_new_system_a_690c1c000713ee459cb11421efd6650c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select supplier_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_suppliers`\n  where supplier_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_suppliers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.70f4fd5ed7": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf.sql", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.70f4fd5ed7", "fqn": ["dbt_project", "stage", "erp_new_system", "source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id"], "alias": "source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf.sql", "unrendered_config": {"alias": "source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf"}, "created_at": 1761245578.3647907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["erp_new_system", "aws_s3__erp_new_system__new_suppliers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/erp_new_system/_sources.yml/source_not_null_erp_new_system_a14be94c0cefb2491de7dd9cc5b37ddf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supplier_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_suppliers`\nwhere supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "sources.erp_new_system", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(source('erp_new_system', 'aws_s3__erp_new_system__new_suppliers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__categories_category_id.09d028212f": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__categories_category_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__categories_category_id.09d028212f", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__categories_category_id"], "alias": "source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6"}, "created_at": 1761245578.3668394, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__categories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__27c16432a200a4b253e2c14c0eb5c8d6.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__categories`\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__categories')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__categories_category_id.6a3557b582": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__categories_category_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__categories_category_id.6a3557b582", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__categories_category_id"], "alias": "source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99"}, "created_at": 1761245578.3683102, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__categories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__categories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_fbf357157ce2a5b4ee04cdd6ddcf6f99.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select category_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__categories`\n  where category_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__categories')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__customers_customer_id.cb006ab80b": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__customers_customer_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__customers_customer_id.cb006ab80b", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__customers_customer_id"], "alias": "source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f"}, "created_at": 1761245578.3704133, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__customers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_95c84c60d672ac5969cc91a8d349116f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__customers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id.955a88ede4": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id.955a88ede4", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id"], "alias": "source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57"}, "created_at": 1761245578.3718784, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__customers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__0a24a8d18058cdedff16dfdec7eb3d57.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__customers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_country.142863dc44": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__customers_country", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_country.142863dc44", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__customers_country"], "alias": "source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297"}, "created_at": 1761245578.3733532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__customers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__2dc5dfc03481eb82d6a34265e348f297.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__customers`\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__customers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id.486343d159": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id.486343d159", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id"], "alias": "source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423"}, "created_at": 1761245578.3754141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employee_territories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__f4bdc81282814f1e8451a1d206367423.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employee_territories`\nwhere employee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__employee_territories')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id.6eeb8818bb": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id.6eeb8818bb", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id"], "alias": "source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721"}, "created_at": 1761245578.37688, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employee_territories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__8e335bcff1db57123129a78223dc0721.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect territory_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employee_territories`\nwhere territory_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "territory_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "territory_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__employee_territories')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__employees_employee_id.932e48e689": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__employees_employee_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__employees_employee_id.932e48e689", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__employees_employee_id"], "alias": "source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731"}, "created_at": 1761245578.3790429, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employees"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_0cd74b901390131a6a002aa0274f6731.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select employee_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees`\n  where employee_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__employees')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id.1932618338": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id.1932618338", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id"], "alias": "source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e"}, "created_at": 1761245578.3805645, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employees"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__4fd94fe43e4c52f1f8bd2bfd0d374f4e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees`\nwhere employee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__employees')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_last_name.645c9784f3": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__employees_last_name", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_last_name.645c9784f3", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__employees_last_name"], "alias": "source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707"}, "created_at": 1761245578.3820574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employees"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__e8cb9afd853c5f44e8ebd5fd23600707.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_name\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees`\nwhere last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__employees')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_first_name.2dcf992fb3": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__employees_first_name", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_first_name.2dcf992fb3", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__employees_first_name"], "alias": "source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a"}, "created_at": 1761245578.3835273, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__employees"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__99d6efae7c66860ba567783b53130d8a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect first_name\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees`\nwhere first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__employees')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id.d93b2b6c5e": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id.d93b2b6c5e", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id"], "alias": "source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca"}, "created_at": 1761245578.3856208, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__order_details"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__ec7ba4d195f20dede63e7e8215f0fbca.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__order_details')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id.5e1aacc2a2": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id.5e1aacc2a2", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id"], "alias": "source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706"}, "created_at": 1761245578.3872042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__order_details"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__e4576cd57e73e586910efef22d509706.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__order_details')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price.0992d4ccee": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price.0992d4ccee", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price"], "alias": "source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1"}, "created_at": 1761245578.3886533, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__order_details"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__941f0f059add7f4cec7216670cda84a1.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`\nwhere unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__order_details')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity.4f9fb9c1f2": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity.4f9fb9c1f2", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity"], "alias": "source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5"}, "created_at": 1761245578.3901567, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__order_details"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__fdbb487b48ebd9dadbe8c002fae246c5.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`\nwhere quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__order_details')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_discount.8383c12fa3": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__order_details_discount", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_discount.8383c12fa3", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__order_details_discount"], "alias": "source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a"}, "created_at": 1761245578.391636, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__order_details"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__1727e91fe2bfc4e807023fd20cc3992a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`\nwhere discount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__order_details')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__orders_order_id.e4ef9d64c3": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__orders_order_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3__erp_northwind__orders_order_id.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__orders_order_id.e4ef9d64c3", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__orders_order_id"], "alias": "source_unique_northwind_aws_s3__erp_northwind__orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3__erp_northwind__orders_order_id.sql", "unrendered_config": {}, "created_at": 1761245578.3936791, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__orders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3__erp_northwind__orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__orders`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__orders')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_order_id.a83e204fb1": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__orders_order_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_order_id.a83e204fb1", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__orders_order_id"], "alias": "source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622"}, "created_at": 1761245578.3952603, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__orders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__be25071cff2040c65c0392847aa69622.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__orders`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__orders')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id.7fc5735f3e": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id.7fc5735f3e", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id"], "alias": "source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1"}, "created_at": 1761245578.3966966, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__orders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__8cadfa7ddc62477f91066980aadd81d1.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__orders`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__orders')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id.186bc04e7d": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id.186bc04e7d", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id"], "alias": "source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed"}, "created_at": 1761245578.398156, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__orders"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__80ec2c9dc5ef8d0439281a77f9b3c5ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__orders`\nwhere employee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__orders')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__products_product_id.f961f916ec": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__products_product_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__products_product_id.f961f916ec", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__products_product_id"], "alias": "source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e"}, "created_at": 1761245578.4002476, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_607dc7a5f84b8b7fb2df10fa103c704e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select product_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__products`\n  where product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__products')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_id.79ffd0db11": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__products_product_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_id.79ffd0db11", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__products_product_id"], "alias": "source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424"}, "created_at": 1761245578.4017005, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__2ad8a977bb0006498417f32f539d0424.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__products`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__products')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_name.3d11642e8b": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__products_product_name", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_name.3d11642e8b", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__products_product_name"], "alias": "source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d"}, "created_at": 1761245578.4032454, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__products"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__504b5514b86a9838991d868d9078b94d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__products`\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__products')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__region_region_id.1fd4f49c9f": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__region_region_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3__erp_northwind__region_region_id.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__region_region_id.1fd4f49c9f", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__region_region_id"], "alias": "source_unique_northwind_aws_s3__erp_northwind__region_region_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3__erp_northwind__region_region_id.sql", "unrendered_config": {}, "created_at": 1761245578.4052737, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__region"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__region"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3__erp_northwind__region_region_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select region_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__region`\n  where region_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "region_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__region')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__region_region_id.7531a0ddc2": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__region_region_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__region_region_id.7531a0ddc2", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__region_region_id"], "alias": "source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317"}, "created_at": 1761245578.4067698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__region"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__region"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__8dc11cb7c8e34a85b07fb160eda25317.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect region_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__region`\nwhere region_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__region')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.6aef1e01df": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.6aef1e01df", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id"], "alias": "source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8"}, "created_at": 1761245578.408795, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__ship_via"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__ship_via"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_fd980203c7c8ce2b2b3801b07832b8c8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ship_via_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__ship_via`\n  where ship_via_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ship_via_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ship_via_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__ship_via')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.2e28f19161": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.2e28f19161", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id"], "alias": "source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60"}, "created_at": 1761245578.4102747, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__ship_via"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__ship_via"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__ce14e5909ea681bb90982e8d3eb12c60.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ship_via_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__ship_via`\nwhere ship_via_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ship_via_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ship_via_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__ship_via')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id.42a313e304": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id.42a313e304", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id"], "alias": "source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3"}, "created_at": 1761245578.4123907, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__shippers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__shippers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_c23c1833713902015ed43f4e5dd341e3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select shipper_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__shippers`\n  where shipper_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipper_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "shipper_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__shippers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id.01ce28eee6": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id.01ce28eee6", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id"], "alias": "source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13"}, "created_at": 1761245578.4138336, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__shippers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__shippers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__00c7e9bf7de17af0e57503fd4678af13.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shipper_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__shippers`\nwhere shipper_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipper_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipper_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__shippers')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id.577ae67023": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id.577ae67023", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id"], "alias": "source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a"}, "created_at": 1761245578.4158573, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__suppliers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_541e1b7d33c16de739daf435edeb644a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select supplier_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__suppliers`\n  where supplier_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__suppliers')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id.f1e22d0ac2": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id.f1e22d0ac2", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id"], "alias": "source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403"}, "created_at": 1761245578.4173317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__suppliers"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__suppliers"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__d9944bbeeb00cd2870e9210e88817403.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supplier_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__suppliers`\nwhere supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__suppliers')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__territories_territory_id.d51f90e917": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__territories_territory_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__territories_territory_id.d51f90e917", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__territories_territory_id"], "alias": "source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e"}, "created_at": 1761245578.4194942, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__territories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__territories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_45556803b8d43d08316644074be0fc4e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select territory_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__territories`\n  where territory_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "territory_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "territory_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__territories')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id.494a760730": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id.494a760730", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id"], "alias": "source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722"}, "created_at": 1761245578.4209566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__territories"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__territories"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__26b86242a42431d719c63d0b2d525722.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect territory_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__territories`\nwhere territory_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "territory_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "territory_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__territories')) }}"}, "namespace": null}}, "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__us_states_state_id.2e1e83b85e": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_unique_northwind_aws_s3__erp_northwind__us_states_state_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__us_states_state_id.2e1e83b85e", "fqn": ["dbt_project", "stage", "northwind", "source_unique_northwind_aws_s3__erp_northwind__us_states_state_id"], "alias": "source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe.sql", "unrendered_config": {"alias": "source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe"}, "created_at": 1761245578.4230378, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__us_states"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__us_states"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_unique_northwind_aws_s3_a50156f4dfea9126c858b545c92409fe.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select state_id as unique_field\n  from `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__us_states`\n  where state_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "state_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__us_states')) }}"}, "namespace": null}}, "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id.7145dd57f8": {"database": "penna-airflow-dbt", "schema": "prod_dbt_test__audit", "name": "source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id", "resource_type": "test", "package_name": "dbt_project", "path": "source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8.sql", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id.7145dd57f8", "fqn": ["dbt_project", "stage", "northwind", "source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id"], "alias": "source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8.sql", "unrendered_config": {"alias": "source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8"}, "created_at": 1761245578.4245071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["northwind", "aws_s3__erp_northwind__us_states"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.dbt_project.northwind.aws_s3__erp_northwind__us_states"]}, "compiled_path": "target/compiled/dbt_project/models/stage/northwind/_sources.yml/source_not_null_northwind_aws__7a2a3883a7aa21dee669eed47fab43d8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_id\nfrom `penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__us_states`\nwhere state_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_id", "file_key_name": "sources.northwind", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_id", "model": "{{ get_where_subquery(source('northwind', 'aws_s3__erp_northwind__us_states')) }}"}, "namespace": null}}}, "sources": {"source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_address", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_address"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_address", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Address of our customers and others. Example: Ana Silva, 123 Main Street", "columns": {"address_id": {"name": "address_id", "description": "Primary key of the address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_name": {"name": "ship_name", "description": "Name of the ship place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address": {"name": "ship_address", "description": "Number and Name of the street", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_city": {"name": "ship_city", "description": "City of the ship place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_region": {"name": "ship_region", "description": "Region of the ship place. Ex.: IL, NY, MA, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_postal_code": {"name": "ship_postal_code", "description": "Postal code of the ship place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_country": {"name": "ship_country", "description": "Country of the ship place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_address`", "created_at": 1761245578.3409128, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_categories", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_categories"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Categories of the products. Example: Eletr\u00f4nicos, Perif\u00e9ricos de Computador, etc.", "columns": {"category_id": {"name": "category_id", "description": "Primary key of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_categories`", "created_at": 1761245578.3458385, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_customers", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_customers"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Customers of the new system. Example: Central Market, Hot Bread Bakery.", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "aws_s3__erp_new_system__company_name": {"name": "aws_s3__erp_new_system__company_name", "description": "Name of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_name": {"name": "contact_name", "description": "Name of the contact person", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_customers`", "created_at": 1761245578.3494596, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_employees", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_employees"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_employees", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Employ of the company. Example: John Smith, Mary Johnson, etc.", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title": {"name": "title", "description": "Title of the employee. e.g.: Sales Manager, Junior Sales Analyst, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "boss_id": {"name": "boss_id", "description": "Id of the boss of the employee. This is related to employee_id at this table (recursive relationship)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_employees`", "created_at": 1761245578.3531153, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_products", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_products"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Products of the company. Example: Laptop, Printer, etc.", "columns": {"product_id": {"name": "product_id", "description": "Primary key of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Foreign key of the category (new_categories)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "Foreign key of the supplier (new_suppliers)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_products`", "created_at": 1761245578.3566566, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_sales", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_sales"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_sales", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"sale_id": {"name": "sale_id", "description": "Primary key of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key of the customer (new_customers)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "salesperson_id": {"name": "salesperson_id", "description": "Responsible salesperson of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sale_date": {"name": "sale_date", "description": "Date of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "required_delivery_date": {"name": "required_delivery_date", "description": "Required delivery date of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "Shipped date of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_via": {"name": "ship_via", "description": "Company responsible to transport the products. e.g.: Correios, DHL, UPS, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freight_value": {"name": "freight_value", "description": "Freight value of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address_id": {"name": "ship_address_id", "description": "Foreign key of the address of the shipment (new_address)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales`", "created_at": 1761245578.3617845, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales_details": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_sales_details", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales_details", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_sales_details"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_sales_details", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"sale_id": {"name": "sale_id", "description": "Foreign key of the sale (new_sales)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Foreign key of the product (new_products)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price_per_unit": {"name": "price_per_unit", "description": "Price per unit of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "qty": {"name": "qty", "description": "Qty of the product that was purchased", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount_percentage": {"name": "discount_percentage", "description": "Percentage of the discount of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted": {"name": "deleted", "description": "Flag if the item was deleted of the sale", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_sales_details`", "created_at": 1761245578.3623564, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_new_system__new_suppliers", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/erp_new_system/_sources.yml", "original_file_path": "models/stage/erp_new_system/_sources.yml", "unique_id": "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers", "fqn": ["dbt_project", "stage", "erp_new_system", "erp_new_system", "aws_s3__erp_new_system__new_suppliers"], "source_name": "erp_new_system", "source_description": "New system of sales", "loader": "bigquery", "identifier": "aws_s3__erp_new_system__new_suppliers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Suppliers of the company. Example: Supplier A, Supplier B, etc.", "columns": {"supplier_id": {"name": "supplier_id", "description": "Primary key of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_name": {"name": "supplier_name", "description": "Name of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_person": {"name": "contact_person", "description": "Name of the contact person of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email": {"name": "email", "description": "Email of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_new_system__new_suppliers`", "created_at": 1761245578.3658788, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__categories": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__categories", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__categories", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__categories"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Product categories. e.g.: beverages, condiments, dairy products, etc.", "columns": {"category_id": {"name": "category_id", "description": "Primary key of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "Name of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Detailed description of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "picture": {"name": "picture", "description": "Should be the picture of the category but it is empty", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__categories`", "created_at": 1761245578.369445, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__customers": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__customers", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__customers", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__customers"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Customers. e.g.: Cactus Comidas para llevar, Rancho grande, etc.", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "aws_s3__erp_northwind__company_name": {"name": "aws_s3__erp_northwind__company_name", "description": "Name of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_name": {"name": "contact_name", "description": "Name of the contact person", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_title": {"name": "contact_title", "description": "Title of the contact person. e.g.: Sales Representative, Sales Agent, Owner, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address": {"name": "address", "description": "Address of the company. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City of the company. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Region of the company (in some cases it is the UF of the state other cases it is full name of state). e.g: RJ, SP, Qu\u00e9bec, etc. There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Postal code of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Country of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone of the company\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fax": {"name": "fax", "description": "Fax of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__customers`", "created_at": 1761245578.3744423, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__employee_territories", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__employee_territories"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__employee_territories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Relationship between employees and territories", "columns": {"employee_id": {"name": "employee_id", "description": "Foreign key of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "territory_id": {"name": "territory_id", "description": "Foreign key of the territory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employee_territories`", "created_at": 1761245578.3780367, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__employees": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__employees", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__employees", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__employees"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__employees", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Employees. e.g.: Nancy Davolio, Andrew Fuller, Janet Leverling, etc.", "columns": {"employee_id": {"name": "employee_id", "description": "Primary key of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_name": {"name": "last_name", "description": "Last name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_name": {"name": "first_name", "description": "First name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title": {"name": "title", "description": "Title of the employee. e.g.: Sales Representative, Sales Agent, Owner, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title_of_courtesy": {"name": "title_of_courtesy", "description": "Title of courtesy of the employee. e.g.: Ms., Mr., Mrs., Dr., etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "birth_date": {"name": "birth_date", "description": "Birth date of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hire_date": {"name": "hire_date", "description": "Hire date of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address": {"name": "address", "description": "Address of the employee. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City of the employee. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Region of the employee (state). There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Postal code of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Country of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "home_phone": {"name": "home_phone", "description": "Home phone of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "extension": {"name": "extension", "description": "Extension of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "notes": {"name": "notes", "description": "Notes of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reports_to": {"name": "reports_to", "description": "Reports to of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__employees`", "created_at": 1761245578.3846292, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__order_details": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__order_details", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__order_details", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__order_details"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__order_details", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Detail of each order like which products, unit price, qty, was bought, etc.", "columns": {"order_id": {"name": "order_id", "description": "Foreign key of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Foreign key of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "Quantity of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount": {"name": "discount", "description": "Discount of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__order_details`", "created_at": 1761245578.3927054, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__orders": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__orders", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__orders", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__orders"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Order information like the customer, sales person, date, etc.", "columns": {"order_id": {"name": "order_id", "description": "Primary key of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_id": {"name": "employee_id", "description": "Foreign key of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "Date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "required_date": {"name": "required_date", "description": "Required date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "Shipped date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_via": {"name": "ship_via", "description": "Code of the ship via. e.g.: 1, 2, 3, 4, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freight": {"name": "freight", "description": "Freight value of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_name": {"name": "ship_name", "description": "Name of the ship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_address": {"name": "ship_address", "description": "Address of the ship. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_city": {"name": "ship_city", "description": "City of the ship. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_region": {"name": "ship_region", "description": "Region of the ship (state). There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_postal_code": {"name": "ship_postal_code", "description": "Postal code of the ship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ship_country": {"name": "ship_country", "description": "Country of the ship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__orders`", "created_at": 1761245578.3992608, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__products": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__products", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__products", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__products"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Products. e.g.: Chai, Chang, Aniseed Syrup, etc.", "columns": {"product_id": {"name": "product_id", "description": "Primary key of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Name of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "Foreign key of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "Foreign key of the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity_per_unit": {"name": "quantity_per_unit", "description": "Description of quantity per unit of the product. e.g.: 10 boxes x 20 bags, 24 - 12 oz bottles, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_in_stock": {"name": "units_in_stock", "description": "Units in stock of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_on_order": {"name": "units_on_order", "description": "Units on order of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reorder_level": {"name": "reorder_level", "description": "Reorder level of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discontinued": {"name": "discontinued", "description": "Discontinued flag of the product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__products`", "created_at": 1761245578.4043188, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__region": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__region", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__region", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__region"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__region", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Region information. E.g: Eastern, Western, etc.", "columns": {"region_id": {"name": "region_id", "description": "Primary key of the region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region_description": {"name": "region_description", "description": "Description of the region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__region`", "created_at": 1761245578.407824, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__ship_via": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__ship_via", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__ship_via", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__ship_via"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__ship_via", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Companies responsable for shipping. e.g.: Speedy Express, United Package, etc.", "columns": {"ship_via_id": {"name": "ship_via_id", "description": "Primary key of the ship via", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "description": {"name": "description", "description": "Description of the ship via. e.g: Speedy Express, United Package, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__ship_via`", "created_at": 1761245578.411424, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__shippers": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__shippers", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__shippers", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__shippers"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__shippers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Companies responsable for shipping. e.g.: Speedy Express, United Package, etc.", "columns": {"shipper_id": {"name": "shipper_id", "description": "Primary key of the shipper", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Name of the shipper", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone of the shipper", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__shippers`", "created_at": 1761245578.4148905, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__suppliers": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__suppliers", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__suppliers", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__suppliers"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__suppliers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Suppliers. e.g.: Exotic Liquids, New Orleans Cajun Delights, etc.", "columns": {"supplier_id": {"name": "supplier_id", "description": "Primary key of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "company_name": {"name": "company_name", "description": "Name of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_name": {"name": "contact_name", "description": "Contact name of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_title": {"name": "contact_title", "description": "Contact title of the supplier. e.g: Marketing Manager, Sales Representative, Owner, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "address": {"name": "address", "description": "Address of the supplier. Not standard (written text).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City of the supplier. They looks like the same names everytime.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "Region of the supplier (state). There are some null values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "postal_code": {"name": "postal_code", "description": "Postal code of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "Country of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "Phone of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fax": {"name": "fax", "description": "Fax of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "homepage": {"name": "homepage", "description": "Homepage of the supplier. A lot of empty values", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__suppliers`", "created_at": 1761245578.4184203, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__territories": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__territories", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__territories", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__territories"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__territories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Territories (cities). e.g.: Boston, Cambridge, Orlando, etc.", "columns": {"territory_id": {"name": "territory_id", "description": "Primary key of the territory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "territory_description": {"name": "territory_description", "description": "Description of the territory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region_id": {"name": "region_id", "description": "Foreign key of the region. e.g.: western, eastern, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__territories`", "created_at": 1761245578.4220405, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.dbt_project.northwind.aws_s3__erp_northwind__us_states": {"database": "penna-airflow-dbt", "schema": "raw", "name": "aws_s3__erp_northwind__us_states", "resource_type": "source", "package_name": "dbt_project", "path": "models/stage/northwind/_sources.yml", "original_file_path": "models/stage/northwind/_sources.yml", "unique_id": "source.dbt_project.northwind.aws_s3__erp_northwind__us_states", "fqn": ["dbt_project", "stage", "northwind", "northwind", "aws_s3__erp_northwind__us_states"], "source_name": "northwind", "source_description": "northwind data", "loader": "bigquery", "identifier": "aws_s3__erp_northwind__us_states", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "United States states. e.g.: Alabama, Alaska, Arizona, etc.", "columns": {"state_id": {"name": "state_id", "description": "Primary key of the state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_name": {"name": "state_name", "description": "Name of the state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_abbr": {"name": "state_abbr", "description": "Abbreviation of the state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_region": {"name": "state_region", "description": "Region of the state. e.g.: south, north, west, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "`penna-airflow-dbt`.`raw`.`aws_s3__erp_northwind__us_states`", "created_at": 1761245578.4255714, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}}, "macros": {"macro.dbt_project.drop_pr_staging_schemas": {"name": "drop_pr_staging_schemas", "resource_type": "macro", "package_name": "dbt_project", "path": "macros/drop_pr_staging_schema.sql", "original_file_path": "macros/drop_pr_staging_schema.sql", "unique_id": "macro.dbt_project.drop_pr_staging_schemas", "macro_sql": "{%- macro drop_pr_staging_schemas(project_id, PR_number) %}\n\n    {% set pr_cleanup_query %}\n        with pr_staging_schemas as (\n            select schema_name\n            from {{ project_id }}.INFORMATION_SCHEMA.SCHEMATA\n            where\n            schema_name like 'pr_'||{{ PR_number }}||'_%'\n        )\n\n        select \n            'drop schema if exists '||schema_name||' cascade;' as drop_command \n        from pr_staging_schemas\n    {% endset %}\n\n{% do log(pr_cleanup_query, info=TRUE) %}\n\n{% set drop_commands = run_query(pr_cleanup_query).columns[0].values() %}\n\n{% if drop_commands %}\n  {% for drop_command in drop_commands %}\n    {% do log(drop_command, True) %}\n      {% do run_query(drop_command) %}\n  {% endfor %}\n{% else %}\n  {% do log('No schemas to drop.', True) %}\n{% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4204903, "supported_languages": null}, "macro.dbt_project.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt_project", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.dbt_project.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.name -%}\n    \n    {# L\u00f3gica para SEDS: ignora o target e usa apenas o nome customizado #}\n    {%- if node.resource_type == 'seed' -%}\n\n        {%- if custom_schema_name is none -%}\n            {{ default_schema }}\n        {%- else -%}\n            {{ custom_schema_name | trim }}\n        {%- endif -%}\n\n    {# L\u00f3gica padr\u00e3o para todos os outros recursos (models, etc.) #}\n    {%- else -%}\n\n        {%- if custom_schema_name is none -%}\n            {{ default_schema }}\n        {%- else -%}\n            {{ default_schema }}_{{ custom_schema_name | trim }}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4216905, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {% if catalog_relation.table_format == 'iceberg' and not temporary %}with connection default{% endif %}\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {%- set submission_method = config.get(\"submission_method\", \"serverless\") -%}\n    {%- if submission_method in (\"serverless\", \"cluster\") -%}\n      {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- elif submission_method == \"bigframes\" -%}\n      {{ bigframes_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported dataframe syntax, it got %s\" % submission_method) %} {%- endif -%}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table", "macro.dbt_bigquery.bigframes_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4276636, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4285352, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4287739, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4290552, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4293108, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4295669, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4298668, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do alter_relation_comment(relation, model.description) %}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.430627, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_comment": {"name": "bigquery__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_comment", "macro_sql": "{% macro bigquery__alter_relation_comment(relation, relation_comment) -%}\n  {% do adapter.update_table_description(relation.database, relation.schema, relation.identifier, relation_comment) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4309719, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4312618, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4319518, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.432627, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.433809, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4341352, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4346051, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4350643, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.435412, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.435865, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.436316, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.438778, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4398234, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4403245, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4406955, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.447344, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4512937, "supported_languages": null}, "macro.dbt_bigquery.bigframes_write_table": {"name": "bigframes_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.bigframes_write_table", "macro_sql": "{% macro bigframes_write_table(compiled_code, target_relation) %}\nimport bigframes.pandas as bpd\nbpd.options.compute.extra_query_labels[\"bigframes-dbt-api\"] = \"python-model-table\"\nbpd.options.bigquery.application_name = f\"dbt-bigquery-{{dbt_version}}\"\nbpd.options.bigquery.ordering_mode = \"partial\"\nbpd.options.bigquery.project = \"{{ target.project }}\"\n{% if target.location %}\nbpd.options.bigquery.location = \"{{ target.location }}\"\n{% endif %}\nsession = bpd.get_global_session()\n{{ compiled_code }}\ndbt = dbtObj(bpd.read_gbq)\ndf = model(dbt, session)\ndf.to_gbq(\"{{ target_relation }}\", if_exists=\"replace\")\ndf._session.close()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.452186, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.452733, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    drop table if exists {{ this_relation }};\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4532402, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4545066, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4561753, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4602795, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.460804, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4622426, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4644754, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.474617, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.materialization_materialized_view_bigquery": {"name": "materialization_materialized_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_bigquery.materialization_materialized_view_bigquery", "macro_sql": "{% materialization materialized_view, adapter='bigquery' -%}\n\n    {% set relations = materialization_materialized_view_default() %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {{ return(relations) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.materialization_materialized_view_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4761524, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4770412, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4774187, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.479554, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4821434, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4846146, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4856517, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4875383, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4888177, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4916296, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4951544, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.497743, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.4990132, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5006878, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5026453, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5045164, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5059185, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5067773, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.509022, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5101345, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5104644, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.510944, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5114133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5120726, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5123403, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.513247, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5138133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5147274, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5154262, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5157695, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5163145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5170507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5176163, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5189226, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5193927, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5205503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5239775, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5244827, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.52512, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5254202, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5257945, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5267627, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5280454, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.529499, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5300596, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5315435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5321884, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.533348, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.533691, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5352807, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5361469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5372012, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.538218, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5390642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5396, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5398562, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.540241, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.542559, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.542913, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5433452, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5436628, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5441618, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5444105, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5447004, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.54524, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5455017, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.546724, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5468876, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5471234, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.547616, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5478039, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5482416, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5498645, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.551524, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.552424, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5530212, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5534506, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5539234, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5550687, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5553472, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5569751, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5576894, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5586977, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5595033, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5596414, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.561125, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5614614, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5617104, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5619593, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5622256, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5627205, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5632777, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5637994, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5673532, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5708432, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5734339, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.574119, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.574558, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5769982, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5773985, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5785239, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5795367, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5812364, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.584282, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5847213, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5859973, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5864496, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.587561, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5888786, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5898256, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5909493, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5913553, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.592611, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.593635, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5940564, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5943732, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5948508, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5951827, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5956812, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.596029, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5965145, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5968702, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.597165, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5975096, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.597793, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.5984545, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6003883, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6024642, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6045275, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6059768, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6130803, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.613609, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6139097, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6181476, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6185877, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6187963, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6202488, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6217988, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6222105, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.623063, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6233928, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6236293, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6238704, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.624103, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6243749, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6245787, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6254056, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6257222, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6283576, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.632623, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.639322, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6426337, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6432397, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6435375, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6437151, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6439707, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6442044, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6445482, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6449587, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and\n                {% if config.get('dbt_valid_to_current') -%}\n                    snapshotted_data.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }}\n                {%- else -%}\n                    snapshotted_data.{{ columns.dbt_valid_to }} is null\n                {%- endif %}\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#/*\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             */#}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and\n            {% if config.get('dbt_valid_to_current') -%}\n                snapshotted_data.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }}\n            {%- else -%}\n                snapshotted_data.{{ columns.dbt_valid_to }} is null\n            {%- endif %}\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6527464, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6531367, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6540444, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6547701, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6558146, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6565716, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6570747, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6576726, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6586702, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6590567, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6594253, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6629221, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6632383, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6636395, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6653337, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6656246, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6659234, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.668374, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6710312, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6717443, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6731956, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- set column_name_to_quoted = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%-   do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n  {%- endfor -%}\n\n  {%- set expected_column_names_quoted = [] -%}\n  {%- for column_name in tested_expected_column_names -%}\n  {%-   do expected_column_names_quoted.append(column_name_to_quoted[column_name|lower]) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types, column_name_to_quoted) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, expected_column_names_quoted) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6763813, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6802373, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6811402, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.681677, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6820507, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6831217, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6836517, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6843379, "supported_languages": null}, "macro.dbt.materialization_function_default": {"name": "materialization_function_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/function.sql", "original_file_path": "macros/materializations/functions/function.sql", "unique_id": "macro.dbt.materialization_function_default", "macro_sql": "{% materialization function, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.Function) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set function_type_macro = get_function_macro('scalar', 'sql') %}\n    {% set build_sql = function_type_macro(target_relation) %}\n\n    {{ function_execute_build_sql(build_sql, existing_relation, target_relation) }}\n\n    {{ run_hooks(post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt.get_function_macro", "macro.dbt.function_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.685487, "supported_languages": ["sql"]}, "macro.dbt.function_execute_build_sql": {"name": "function_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.function_execute_build_sql", "macro_sql": "{% macro function_execute_build_sql(build_sql, existing_relation, target_relation) %}\n    {{ return(adapter.dispatch('function_execute_build_sql', 'dbt')(build_sql, existing_relation, target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__function_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.686249, "supported_languages": null}, "macro.dbt.default__function_execute_build_sql": {"name": "default__function_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.default__function_execute_build_sql", "macro_sql": "{% macro default__function_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.687148, "supported_languages": null}, "macro.dbt.get_function_macro": {"name": "get_function_macro", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.get_function_macro", "macro_sql": "{% macro get_function_macro(function_type, function_language) %}\n    {{ return(adapter.dispatch('get_function_macro', 'dbt')(function_type, function_language)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_function_macro"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6875017, "supported_languages": null}, "macro.dbt.default__get_function_macro": {"name": "default__get_function_macro", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.default__get_function_macro", "macro_sql": "{% macro default__get_function_macro(function_type, function_language) %}\n    {% set macro_name = function_type ~ \"_function_\" ~ function_language %}\n    {% if not macro_name in context %}\n        {{ exceptions.raise_not_implemented(function_language ~ ' ' ~ function_type ~ ' function not implemented for adapter ' ~adapter.type()) }}\n    {% endif %}\n    {% set macro = context[macro_name] %}\n    {{ return(macro) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6882412, "supported_languages": null}, "macro.dbt.scalar_function_sql": {"name": "scalar_function_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_sql", "macro_sql": "{% macro scalar_function_sql(target_relation) %}\n    {{ return(adapter.dispatch('scalar_function_sql', 'dbt')(target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6889758, "supported_languages": null}, "macro.dbt.default__scalar_function_sql": {"name": "default__scalar_function_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_sql", "macro_sql": "{% macro default__scalar_function_sql(target_relation) %}\n    {{ scalar_function_create_replace_signature_sql(target_relation) }}\n    {{ scalar_function_body_sql() }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.scalar_function_create_replace_signature_sql", "macro.dbt.scalar_function_body_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6892705, "supported_languages": null}, "macro.dbt.scalar_function_create_replace_signature_sql": {"name": "scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_create_replace_signature_sql", "macro_sql": "{% macro scalar_function_create_replace_signature_sql(target_relation) %}\n    {{ return(adapter.dispatch('scalar_function_create_replace_signature_sql', 'dbt')(target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_create_replace_signature_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.689581, "supported_languages": null}, "macro.dbt.default__scalar_function_create_replace_signature_sql": {"name": "default__scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_create_replace_signature_sql", "macro_sql": "{% macro default__scalar_function_create_replace_signature_sql(target_relation) %}\n    CREATE OR REPLACE FUNCTION {{ target_relation.render() }} ({{ formatted_scalar_function_args_sql()}})\n    RETURNS {{ model.returns.data_type }}\n    AS\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6899016, "supported_languages": null}, "macro.dbt.formatted_scalar_function_args_sql": {"name": "formatted_scalar_function_args_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.formatted_scalar_function_args_sql", "macro_sql": "{% macro formatted_scalar_function_args_sql() %}\n    {{ return(adapter.dispatch('formatted_scalar_function_args_sql', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6902041, "supported_languages": null}, "macro.dbt.default__formatted_scalar_function_args_sql": {"name": "default__formatted_scalar_function_args_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__formatted_scalar_function_args_sql", "macro_sql": "{% macro default__formatted_scalar_function_args_sql() %}\n    {% set args = [] %}\n    {% for arg in model.arguments -%}\n        {%- do args.append(arg.name ~ ' ' ~ arg.data_type) -%}\n    {%- endfor %}\n    {{ args | join(', ') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6907625, "supported_languages": null}, "macro.dbt.scalar_function_body_sql": {"name": "scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_body_sql", "macro_sql": "{% macro scalar_function_body_sql() %}\n    {{ return(adapter.dispatch('scalar_function_body_sql', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_body_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.691067, "supported_languages": null}, "macro.dbt.default__scalar_function_body_sql": {"name": "default__scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_body_sql", "macro_sql": "{% macro default__scalar_function_body_sql() %}\n    $$\n       {{ model.compiled_code }}\n    $$ LANGUAGE SQL\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.691256, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6916678, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6918845, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6924174, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.692561, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6930974, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6935298, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6937795, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6943088, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6945984, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6950364, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6952393, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6956608, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6959398, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6964202, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6966574, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6974645, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6984897, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.698872, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.6995795, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.700066, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.700309, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7009268, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7013729, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7018237, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7020915, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7031715, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7034416, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7037227, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7039814, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7044163, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.704679, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7049534, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.705272, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7055533, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7058094, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7061005, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7063546, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7066288, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.706879, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7074323, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7079248, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.708408, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7086525, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7091248, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7093596, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7099578, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7102666, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7106612, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7111576, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7114022, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.711911, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.71222, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7127352, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7132788, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7136815, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.71396, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7146106, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7148619, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7154026, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7156901, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.716161, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7163932, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7167664, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7169049, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7173307, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7175162, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7182472, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7189512, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7193806, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7195663, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7202668, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7209983, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7213247, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7222455, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.722667, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7228572, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7234867, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.72428, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7247944, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7252657, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.726151, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7283945, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.729192, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7300117, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7303727, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7308927, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7314806, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7319117, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7323692, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7327344, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7334538, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7341588, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7344694, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.734815, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7351754, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7356818, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7360506, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7365472, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7368996, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7373555, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7376118, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7380583, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7383165, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7387471, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7390287, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7398863, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7402368, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7408552, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7411385, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.741551, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7417722, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7422824, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7425206, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7436826, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7438931, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7448385, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7451408, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.745379, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.747558, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7482347, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7488062, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7494366, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7497146, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7500484, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7508018, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7516465, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.751911, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7537882, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7541413, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7545438, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7549977, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7552633, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7556734, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7558918, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7570162, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7573402, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7580976, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7592828, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7601063, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7604232, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7607253, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7612, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7614691, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7618997, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7621744, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7625728, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7627847, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   set column_name_to_quoted = {} -%}\n{%-   for column in columns_in_relation -%}\n\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-     do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7672033, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types, column_name_to_quoted) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7682512, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7701852, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7705457, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7707162, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7716143, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7721307, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7725196, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7730558, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7736642, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7743692, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7749512, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7754428, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7761621, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.776777, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7773015, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.779483, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7804573, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7809577, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.782222, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7842515, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7855303, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7859287, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7870378, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7873268, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7880006, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7885027, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7889092, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7894704, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7897851, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7901192, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7905192, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7914433, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7918239, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7920794, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7934222, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7938864, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7942648, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7947223, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7950668, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7955012, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7958114, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7962523, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7965946, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7971282, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7974384, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7977166, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7980375, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7983224, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7986035, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.798865, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.7992232, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.799517, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8002737, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8005362, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8007832, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8009706, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.801708, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8020096, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8021512, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8024306, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.802708, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8032515, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8035715, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.803846, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.804189, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8049073, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8057835, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8061607, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8066978, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8073444, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.807658, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8080096, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8084688, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8088484, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8096204, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8098557, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8101442, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8108191, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8111496, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8113892, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.811654, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.811872, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.813578, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.813785, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8140938, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8142982, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8148994, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8152354, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8154535, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8158312, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8162124, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8165927, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8169513, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8177178, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8189027, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8192525, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8196826, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8200827, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8220396, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8241024, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8246157, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8256555, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.826609, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.827299, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8277826, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8281646, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8302064, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8308, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.831146, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8317385, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8321736, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8333337, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8337643, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8352053, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.835932, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8362503, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8365974, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8368914, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8373525, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.838315, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.839071, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8395154, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8400462, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761245576.8405414, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_project.dim_shippers": ["model.dbt_project.int_dim_shippers"], "model.dbt_project.dim_customers": ["model.dbt_project.int_dim_customers"], "model.dbt_project.dim_products": ["model.dbt_project.int_dim_products"], "model.dbt_project.fact_orders": ["model.dbt_project.int_fact_orders"], "model.dbt_project.dim_employees": ["model.dbt_project.int_dim_employees"], "model.dbt_project.int_dim_employees": ["model.dbt_project.erp_new_system__employee_hierarchy", "model.dbt_project.erp_new_system__employees", "model.dbt_project.northwind__employee_hierarchy", "model.dbt_project.northwind__employees"], "model.dbt_project.int_dim_products": ["model.dbt_project.erp_new_system__categories", "model.dbt_project.erp_new_system__products", "model.dbt_project.erp_new_system__suppliers", "model.dbt_project.northwind__categories", "model.dbt_project.northwind__products", "model.dbt_project.northwind__suppliers"], "model.dbt_project.int_dim_customers": ["model.dbt_project.erp_new_system__customers", "model.dbt_project.northwind__customers"], "model.dbt_project.int_fact_orders": ["model.dbt_project.erp_new_system__address", "model.dbt_project.erp_new_system__sales", "model.dbt_project.erp_new_system__sales_details", "model.dbt_project.northwind__order_details", "model.dbt_project.northwind__orders", "model.dbt_project.northwind__ship_via"], "model.dbt_project.int_dim_shippers": ["model.dbt_project.northwind__shippers"], "model.dbt_project.erp_new_system__sales_details": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales_details"], "model.dbt_project.erp_new_system__employee_hierarchy": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"], "model.dbt_project.erp_new_system__suppliers": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers"], "model.dbt_project.erp_new_system__products": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products"], "model.dbt_project.erp_new_system__sales": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"], "model.dbt_project.erp_new_system__customers": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers"], "model.dbt_project.erp_new_system__employees": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"], "model.dbt_project.erp_new_system__address": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address"], "model.dbt_project.erp_new_system__categories": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories"], "model.dbt_project.northwind__suppliers": ["source.dbt_project.northwind.aws_s3__erp_northwind__suppliers"], "model.dbt_project.northwind__employee_hierarchy": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"], "model.dbt_project.northwind__orders": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"], "model.dbt_project.northwind__us_states": ["source.dbt_project.northwind.aws_s3__erp_northwind__us_states"], "model.dbt_project.northwind__products": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"], "model.dbt_project.northwind__categories": ["source.dbt_project.northwind.aws_s3__erp_northwind__categories"], "model.dbt_project.northwind__employees": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"], "model.dbt_project.northwind__region": ["source.dbt_project.northwind.aws_s3__erp_northwind__region"], "model.dbt_project.northwind__employee_territories": ["source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories"], "model.dbt_project.northwind__ship_via": ["source.dbt_project.northwind.aws_s3__erp_northwind__ship_via"], "model.dbt_project.northwind__shippers": ["source.dbt_project.northwind.aws_s3__erp_northwind__shippers"], "model.dbt_project.northwind__order_details": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"], "model.dbt_project.northwind__customers": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"], "model.dbt_project.northwind__territories": ["source.dbt_project.northwind.aws_s3__erp_northwind__territories"], "snapshot.dbt_project.products_snapshot": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"], "seed.dbt_project.new_sales_details": [], "seed.dbt_project.new_address": [], "seed.dbt_project.new_suppliers": [], "seed.dbt_project.new_customers": [], "seed.dbt_project.new_products": [], "seed.dbt_project.new_sales": [], "seed.dbt_project.new_employees": [], "seed.dbt_project.new_categories": [], "seed.dbt_project.order_details": [], "seed.dbt_project.customers": [], "seed.dbt_project.categories": [], "seed.dbt_project.shippers": [], "seed.dbt_project.region": [], "seed.dbt_project.customer_customer_demo": [], "seed.dbt_project.suppliers": [], "seed.dbt_project.employee_territories": [], "seed.dbt_project.ship_via": [], "seed.dbt_project.territories": [], "seed.dbt_project.products": [], "seed.dbt_project.customer_demographics": [], "seed.dbt_project.us_states": [], "seed.dbt_project.employees": [], "seed.dbt_project.orders": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id.04a5fae560": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id.daa8721bb5": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address"], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.863ac0d10c": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.c0902ca528": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories"], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.2854f11578": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.19a63c424a": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers"], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.cab7819ba9": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.213b5e40ba": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees"], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id.44494d6ce0": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id.ed855a5aa1": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products"], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.683feea94c": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.8b084b15ec": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id.e7b8d96015": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales"], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.a4cbc601cf": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers"], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.70f4fd5ed7": ["source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__categories_category_id.09d028212f": ["source.dbt_project.northwind.aws_s3__erp_northwind__categories"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__categories_category_id.6a3557b582": ["source.dbt_project.northwind.aws_s3__erp_northwind__categories"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__customers_customer_id.cb006ab80b": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id.955a88ede4": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_country.142863dc44": ["source.dbt_project.northwind.aws_s3__erp_northwind__customers"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id.486343d159": ["source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id.6eeb8818bb": ["source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__employees_employee_id.932e48e689": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id.1932618338": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_last_name.645c9784f3": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_first_name.2dcf992fb3": ["source.dbt_project.northwind.aws_s3__erp_northwind__employees"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id.d93b2b6c5e": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id.5e1aacc2a2": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price.0992d4ccee": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity.4f9fb9c1f2": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_discount.8383c12fa3": ["source.dbt_project.northwind.aws_s3__erp_northwind__order_details"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__orders_order_id.e4ef9d64c3": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_order_id.a83e204fb1": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id.7fc5735f3e": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id.186bc04e7d": ["source.dbt_project.northwind.aws_s3__erp_northwind__orders"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__products_product_id.f961f916ec": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_id.79ffd0db11": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_name.3d11642e8b": ["source.dbt_project.northwind.aws_s3__erp_northwind__products"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__region_region_id.1fd4f49c9f": ["source.dbt_project.northwind.aws_s3__erp_northwind__region"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__region_region_id.7531a0ddc2": ["source.dbt_project.northwind.aws_s3__erp_northwind__region"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.6aef1e01df": ["source.dbt_project.northwind.aws_s3__erp_northwind__ship_via"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.2e28f19161": ["source.dbt_project.northwind.aws_s3__erp_northwind__ship_via"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id.42a313e304": ["source.dbt_project.northwind.aws_s3__erp_northwind__shippers"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id.01ce28eee6": ["source.dbt_project.northwind.aws_s3__erp_northwind__shippers"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id.577ae67023": ["source.dbt_project.northwind.aws_s3__erp_northwind__suppliers"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id.f1e22d0ac2": ["source.dbt_project.northwind.aws_s3__erp_northwind__suppliers"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__territories_territory_id.d51f90e917": ["source.dbt_project.northwind.aws_s3__erp_northwind__territories"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id.494a760730": ["source.dbt_project.northwind.aws_s3__erp_northwind__territories"], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__us_states_state_id.2e1e83b85e": ["source.dbt_project.northwind.aws_s3__erp_northwind__us_states"], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id.7145dd57f8": ["source.dbt_project.northwind.aws_s3__erp_northwind__us_states"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales_details": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers": [], "source.dbt_project.northwind.aws_s3__erp_northwind__categories": [], "source.dbt_project.northwind.aws_s3__erp_northwind__customers": [], "source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories": [], "source.dbt_project.northwind.aws_s3__erp_northwind__employees": [], "source.dbt_project.northwind.aws_s3__erp_northwind__order_details": [], "source.dbt_project.northwind.aws_s3__erp_northwind__orders": [], "source.dbt_project.northwind.aws_s3__erp_northwind__products": [], "source.dbt_project.northwind.aws_s3__erp_northwind__region": [], "source.dbt_project.northwind.aws_s3__erp_northwind__ship_via": [], "source.dbt_project.northwind.aws_s3__erp_northwind__shippers": [], "source.dbt_project.northwind.aws_s3__erp_northwind__suppliers": [], "source.dbt_project.northwind.aws_s3__erp_northwind__territories": [], "source.dbt_project.northwind.aws_s3__erp_northwind__us_states": []}, "child_map": {"model.dbt_project.dim_shippers": [], "model.dbt_project.dim_customers": [], "model.dbt_project.dim_products": [], "model.dbt_project.fact_orders": [], "model.dbt_project.dim_employees": [], "model.dbt_project.int_dim_employees": ["model.dbt_project.dim_employees"], "model.dbt_project.int_dim_products": ["model.dbt_project.dim_products"], "model.dbt_project.int_dim_customers": ["model.dbt_project.dim_customers"], "model.dbt_project.int_fact_orders": ["model.dbt_project.fact_orders"], "model.dbt_project.int_dim_shippers": ["model.dbt_project.dim_shippers"], "model.dbt_project.erp_new_system__sales_details": ["model.dbt_project.int_fact_orders"], "model.dbt_project.erp_new_system__employee_hierarchy": ["model.dbt_project.int_dim_employees"], "model.dbt_project.erp_new_system__suppliers": ["model.dbt_project.int_dim_products"], "model.dbt_project.erp_new_system__products": ["model.dbt_project.int_dim_products"], "model.dbt_project.erp_new_system__sales": ["model.dbt_project.int_fact_orders"], "model.dbt_project.erp_new_system__customers": ["model.dbt_project.int_dim_customers"], "model.dbt_project.erp_new_system__employees": ["model.dbt_project.int_dim_employees"], "model.dbt_project.erp_new_system__address": ["model.dbt_project.int_fact_orders"], "model.dbt_project.erp_new_system__categories": ["model.dbt_project.int_dim_products"], "model.dbt_project.northwind__suppliers": ["model.dbt_project.int_dim_products"], "model.dbt_project.northwind__employee_hierarchy": ["model.dbt_project.int_dim_employees"], "model.dbt_project.northwind__orders": ["model.dbt_project.int_fact_orders"], "model.dbt_project.northwind__us_states": [], "model.dbt_project.northwind__products": ["model.dbt_project.int_dim_products"], "model.dbt_project.northwind__categories": ["model.dbt_project.int_dim_products"], "model.dbt_project.northwind__employees": ["model.dbt_project.int_dim_employees"], "model.dbt_project.northwind__region": [], "model.dbt_project.northwind__employee_territories": [], "model.dbt_project.northwind__ship_via": ["model.dbt_project.int_fact_orders"], "model.dbt_project.northwind__shippers": ["model.dbt_project.int_dim_shippers"], "model.dbt_project.northwind__order_details": ["model.dbt_project.int_fact_orders"], "model.dbt_project.northwind__customers": ["model.dbt_project.int_dim_customers"], "model.dbt_project.northwind__territories": [], "snapshot.dbt_project.products_snapshot": [], "seed.dbt_project.new_sales_details": [], "seed.dbt_project.new_address": [], "seed.dbt_project.new_suppliers": [], "seed.dbt_project.new_customers": [], "seed.dbt_project.new_products": [], "seed.dbt_project.new_sales": [], "seed.dbt_project.new_employees": [], "seed.dbt_project.new_categories": [], "seed.dbt_project.order_details": [], "seed.dbt_project.customers": [], "seed.dbt_project.categories": [], "seed.dbt_project.shippers": [], "seed.dbt_project.region": [], "seed.dbt_project.customer_customer_demo": [], "seed.dbt_project.suppliers": [], "seed.dbt_project.employee_territories": [], "seed.dbt_project.ship_via": [], "seed.dbt_project.territories": [], "seed.dbt_project.products": [], "seed.dbt_project.customer_demographics": [], "seed.dbt_project.us_states": [], "seed.dbt_project.employees": [], "seed.dbt_project.orders": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id.04a5fae560": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id.daa8721bb5": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.863ac0d10c": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.c0902ca528": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.2854f11578": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.19a63c424a": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.cab7819ba9": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.213b5e40ba": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id.44494d6ce0": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id.ed855a5aa1": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.683feea94c": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.8b084b15ec": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id.e7b8d96015": [], "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.a4cbc601cf": [], "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.70f4fd5ed7": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__categories_category_id.09d028212f": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__categories_category_id.6a3557b582": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__customers_customer_id.cb006ab80b": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id.955a88ede4": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_country.142863dc44": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id.486343d159": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id.6eeb8818bb": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__employees_employee_id.932e48e689": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id.1932618338": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_last_name.645c9784f3": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_first_name.2dcf992fb3": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id.d93b2b6c5e": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id.5e1aacc2a2": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price.0992d4ccee": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity.4f9fb9c1f2": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_discount.8383c12fa3": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__orders_order_id.e4ef9d64c3": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_order_id.a83e204fb1": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id.7fc5735f3e": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id.186bc04e7d": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__products_product_id.f961f916ec": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_id.79ffd0db11": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_name.3d11642e8b": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__region_region_id.1fd4f49c9f": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__region_region_id.7531a0ddc2": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.6aef1e01df": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.2e28f19161": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id.42a313e304": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id.01ce28eee6": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id.577ae67023": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id.f1e22d0ac2": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__territories_territory_id.d51f90e917": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id.494a760730": [], "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__us_states_state_id.2e1e83b85e": [], "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id.7145dd57f8": [], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_address": ["model.dbt_project.erp_new_system__address", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_address_address_id.daa8721bb5", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_address_address_id.04a5fae560"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_categories": ["model.dbt_project.erp_new_system__categories", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.c0902ca528", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_categories_category_id.863ac0d10c"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_customers": ["model.dbt_project.erp_new_system__customers", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.19a63c424a", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_customers_customer_id.2854f11578"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_employees": ["model.dbt_project.erp_new_system__employee_hierarchy", "model.dbt_project.erp_new_system__employees", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.213b5e40ba", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_employees_employee_id.cab7819ba9"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_products": ["model.dbt_project.erp_new_system__products", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_products_product_id.ed855a5aa1", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_products_product_id.44494d6ce0"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales": ["model.dbt_project.erp_new_system__sales", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_customer_id.e7b8d96015", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.8b084b15ec", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_sales_sale_id.683feea94c"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_sales_details": ["model.dbt_project.erp_new_system__sales_details"], "source.dbt_project.erp_new_system.aws_s3__erp_new_system__new_suppliers": ["model.dbt_project.erp_new_system__suppliers", "test.dbt_project.source_not_null_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.70f4fd5ed7", "test.dbt_project.source_unique_erp_new_system_aws_s3__erp_new_system__new_suppliers_supplier_id.a4cbc601cf"], "source.dbt_project.northwind.aws_s3__erp_northwind__categories": ["model.dbt_project.northwind__categories", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__categories_category_id.09d028212f", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__categories_category_id.6a3557b582"], "source.dbt_project.northwind.aws_s3__erp_northwind__customers": ["model.dbt_project.northwind__customers", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_country.142863dc44", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__customers_customer_id.955a88ede4", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__customers_customer_id.cb006ab80b"], "source.dbt_project.northwind.aws_s3__erp_northwind__employee_territories": ["model.dbt_project.northwind__employee_territories", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_employee_id.486343d159", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employee_territories_territory_id.6eeb8818bb"], "source.dbt_project.northwind.aws_s3__erp_northwind__employees": ["model.dbt_project.northwind__employee_hierarchy", "model.dbt_project.northwind__employees", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_employee_id.1932618338", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_first_name.2dcf992fb3", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__employees_last_name.645c9784f3", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__employees_employee_id.932e48e689"], "source.dbt_project.northwind.aws_s3__erp_northwind__order_details": ["model.dbt_project.northwind__order_details", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_discount.8383c12fa3", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_order_id.d93b2b6c5e", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_product_id.5e1aacc2a2", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_quantity.4f9fb9c1f2", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__order_details_unit_price.0992d4ccee"], "source.dbt_project.northwind.aws_s3__erp_northwind__orders": ["model.dbt_project.northwind__orders", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_customer_id.7fc5735f3e", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_employee_id.186bc04e7d", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__orders_order_id.a83e204fb1", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__orders_order_id.e4ef9d64c3"], "source.dbt_project.northwind.aws_s3__erp_northwind__products": ["model.dbt_project.northwind__products", "snapshot.dbt_project.products_snapshot", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_id.79ffd0db11", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__products_product_name.3d11642e8b", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__products_product_id.f961f916ec"], "source.dbt_project.northwind.aws_s3__erp_northwind__region": ["model.dbt_project.northwind__region", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__region_region_id.7531a0ddc2", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__region_region_id.1fd4f49c9f"], "source.dbt_project.northwind.aws_s3__erp_northwind__ship_via": ["model.dbt_project.northwind__ship_via", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.2e28f19161", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__ship_via_ship_via_id.6aef1e01df"], "source.dbt_project.northwind.aws_s3__erp_northwind__shippers": ["model.dbt_project.northwind__shippers", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__shippers_shipper_id.01ce28eee6", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__shippers_shipper_id.42a313e304"], "source.dbt_project.northwind.aws_s3__erp_northwind__suppliers": ["model.dbt_project.northwind__suppliers", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__suppliers_supplier_id.f1e22d0ac2", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__suppliers_supplier_id.577ae67023"], "source.dbt_project.northwind.aws_s3__erp_northwind__territories": ["model.dbt_project.northwind__territories", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__territories_territory_id.494a760730", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__territories_territory_id.d51f90e917"], "source.dbt_project.northwind.aws_s3__erp_northwind__us_states": ["model.dbt_project.northwind__us_states", "test.dbt_project.source_not_null_northwind_aws_s3__erp_northwind__us_states_state_id.7145dd57f8", "test.dbt_project.source_unique_northwind_aws_s3__erp_northwind__us_states_state_id.2e1e83b85e"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}, "functions": {}}